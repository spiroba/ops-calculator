import os
import logging
import asyncio
from typing import Dict
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler, MessageHandler,
    ContextTypes, ConversationHandler, filters
)
from telegram.constants import ParseMode

from config_v2 import (
    TOKEN, MESSAGES, POSITIONS_CONFIG, OPERATIONS_CONFIG, 
    KPI_CONFIG, KPI_WEIGHTS, TEAM_COEFFICIENTS_CONFIG, POSITION_RATES,
    UserState
)
from calculator_v2 import PremiumCalculator, format_money, format_percent

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
(CHOOSING_POSITION, ENTERING_SALARY, ENTERING_RATE,
 ASKING_OPERATIONS, ASKING_OPERATION_QUANTITY, ASKING_PVZ_SCHEDULE, ASKING_PVZ_RATING,
ASKING_KPI, ASKING_COEFFICIENTS, ENTERING_COEFFICIENTS, SHOWING_RESULTS) = range(11)

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states: Dict[int, UserState] = {}

def get_operations_for_position(position_id: str) -> list:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ–ø–µ—Ä–∞—Ü–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è –¥–æ–ª–∂–Ω–æ—Å—Ç–∏"""
    position_config = POSITIONS_CONFIG.get(position_id, {})
    available_operations = position_config.get('operations', [])
    
    # –ï—Å–ª–∏ operations –Ω–µ —É–∫–∞–∑–∞–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    if not available_operations:
        return list(OPERATIONS_CONFIG.keys())
    
    return available_operations

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
def get_main_menu():
    """–°–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
    keyboard = [
        [KeyboardButton("üßÆ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø—Ä–µ–º–∏—é")],
        [KeyboardButton("üìã –°–ø–∏—Å–æ–∫ –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π"), KeyboardButton("üìä –°–ø–∏—Å–æ–∫ –æ–ø–µ—Ä–∞—Ü–∏–π")],
        [KeyboardButton("‚ùì –°–ø—Ä–∞–≤–∫–∞"), KeyboardButton("üÜò –ü–æ–º–æ—â—å")],
        [KeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —Ä–∞—Å—á–µ—Ç")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)

class CleanPremiumBot:
    """–ß–∏—Å—Ç—ã–π –±–æ—Ç –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –ø—Ä–µ–º–∏–π –û–ü–° —Å –∫–Ω–æ–ø–∫–∞–º–∏ –º–µ–Ω—é"""
    
    def __init__(self):
        self.calculator = PremiumCalculator()
    
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ö–æ–º–∞–Ω–¥–∞ /start —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é"""
        user_id = update.effective_user.id
        user_states[user_id] = UserState()
        
        welcome_text = (
            "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø—Ä–µ–º–∏–π –û–ü–° v2.4!</b>\n\n"
            "–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø—Ä–µ–º–∏—é —Å —É—á–µ—Ç–æ–º:\n"
            "üí∞ –†–∞–∑–º–µ—Ä–∞ –æ–∫–ª–∞–¥–∞ –∏ —Å—Ç–∞–≤–∫–∏\n"
            "üìä –í—Å–µ—Ö 25 —Ç–∏–ø–æ–≤ –æ–ø–µ—Ä–∞—Ü–∏–π\n"
            "‚≠ê –ö–ü–ò –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π\n"
            "‚ö° –ö–æ–º–∞–Ω–¥–Ω—ã—Ö –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤\n\n"
            "üëá <b>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:</b>"
        )
        
        await update.message.reply_text(
            welcome_text,
            parse_mode=ParseMode.HTML,
            reply_markup=get_main_menu()
        )
        return ConversationHandler.END
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ö–æ–º–∞–Ω–¥–∞ /help"""
        help_text = (
            "üîç <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:</b>\n\n"
            "üßÆ <b>–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø—Ä–µ–º–∏—é</b> - –ù–∞—á–∞—Ç—å —Ä–∞—Å—á–µ—Ç –ø—Ä–µ–º–∏–∏\n"
            "üìã <b>–°–ø–∏—Å–æ–∫ –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π</b> - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏\n"
            "üìä <b>–°–ø–∏—Å–æ–∫ –æ–ø–µ—Ä–∞—Ü–∏–π</b> - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏\n"
            "‚ùì <b>–°–ø—Ä–∞–≤–∫–∞</b> - –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ä–º—É–ª—ã —Ä–∞—Å—á–µ—Ç–∞\n"
            "üÜò <b>–ü–æ–º–æ—â—å</b> - –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
            "ü§ñ –í–µ—Ä—Å–∏—è: v2.4 (—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å HTML –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–æ–º)\n\n"
            "üí° <b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
            "/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
            "/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ä–∞—Å—á–µ—Ç\n\n"
            "üëÜ <b>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é - —ç—Ç–æ —É–¥–æ–±–Ω–µ–µ!</b>"
        )
        
        await update.message.reply_text(
            help_text,
            parse_mode=ParseMode.HTML,
            reply_markup=get_main_menu()
        )
        return ConversationHandler.END
    
    async def handle_menu_buttons(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é"""
        text = update.message.text
        
        if text == "üßÆ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø—Ä–µ–º–∏—é":
            return await self.calculate(update, context)
        elif text == "üìã –°–ø–∏—Å–æ–∫ –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π":
            return await self.positions(update, context)
        elif text == "üìä –°–ø–∏—Å–æ–∫ –æ–ø–µ—Ä–∞—Ü–∏–π":
            return await self.operations(update, context)
        elif text == "‚ùì –°–ø—Ä–∞–≤–∫–∞":
            return await self.show_formulas_help(update, context)
        elif text == "üÜò –ü–æ–º–æ—â—å":
            return await self.help_command(update, context)
        elif text == "üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —Ä–∞—Å—á–µ—Ç":
            return await self.clear_calculation(update, context)
        else:
            # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–Ω–æ–ø–∫–∞
            await update.message.reply_text(
                "‚ùì –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
                reply_markup=get_main_menu()
            )
            return ConversationHandler.END
    
    async def clear_calculation(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
        if user_id in user_states:
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            del user_states[user_id]
            
            await update.message.reply_text(
                "üóëÔ∏è <b>–†–∞—Å—á–µ—Ç –æ—á–∏—â–µ–Ω!</b>\n\n"
                "‚úÖ –í—Å–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã:\n"
                "‚Ä¢ –î–æ–ª–∂–Ω–æ—Å—Ç—å\n"
                "‚Ä¢ –û–∫–ª–∞–¥ –∏ —Å—Ç–∞–≤–∫–∞\n"
                "‚Ä¢ –û–ø–µ—Ä–∞—Ü–∏–∏\n"
                "‚Ä¢ –ö–ü–ò –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏\n"
                "‚Ä¢ –ö–æ–º–∞–Ω–¥–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã\n\n"
                "üîÑ –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞.\n\n"
                "üí° –ù–∞–∂–º–∏—Ç–µ <b>üßÆ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø—Ä–µ–º–∏—é</b> –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞.",
                parse_mode=ParseMode.HTML,
                reply_markup=get_main_menu()
            )
        else:
            await update.message.reply_text(
                "‚ÑπÔ∏è <b>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—á–∏—Å—Ç–∫–∏</b>\n\n"
                "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏.\n\n"
                "üí° –ù–∞–∂–º–∏—Ç–µ <b>üßÆ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø—Ä–µ–º–∏—é</b> —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç.",
                parse_mode=ParseMode.HTML,
                reply_markup=get_main_menu()
            )
        
        return ConversationHandler.END
    
    async def show_formulas_help(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É —Å —Ñ–æ—Ä–º—É–ª–∞–º–∏"""
        formulas_text = (
            "üìê <b>–§–æ—Ä–º—É–ª—ã —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–µ–º–∏–π –û–ü–° v2.4:</b>\n\n"
            "üí∞ <b>–ö–ü–ò –±–æ–Ω—É—Å (–Ω–æ–≤–∞—è —Ñ–æ—Ä–º—É–ª–∞):</b>\n"
            "<code>–ö–ü–ò = (–æ–∫–ª–∞–¥ √ó —Å—Ç–∞–≤–∫–∞) √ó –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç_–ö–ü–ò</code>\n\n"
            "‚ö° <b>–û–ø–µ—Ä–∞—Ü–∏–∏ —Å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º–∏:</b>\n"
            "‚Ä¢ –¢–∏–ø 1: –±–µ–∑ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤\n"
            "‚Ä¢ –¢–∏–ø 2: √ó –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–µ—Ä–≤–∏—Å–∞ (CSI)\n"
            "‚Ä¢ –¢–∏–ø 3: √ó –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –ø—Ä–∏–µ–º–∞\n"
            "‚Ä¢ –¢–∏–ø 4: √ó –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –≤—Ä—É—á–µ–Ω–∏—è\n\n"
            "üìà <b>–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:</b>\n"
            "–ü—Ä–∏ –≤—ã—Ä—É—á–∫–µ ‚â•100%: +30% –∫ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π –ø—Ä–µ–º–∏–∏\n\n"
            "‚ö†Ô∏è <b>–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∞–≤–∏–ª–æ:</b>\n"
            "–í—ã—Ä—É—á–∫–∞ &lt;80% ‚Üí –ö–ü–ò = 0‚ÇΩ\n\n"
            "üèÜ <b>–ò—Ç–æ–≥–æ–≤–∞—è —Ñ–æ—Ä–º—É–ª–∞:</b>\n"
            "<code>–ü—Ä–µ–º–∏—è = –û–ø–µ—Ä–∞—Ü–∏–∏ + –ö–ü–ò + –ë–æ–Ω—É—Å—ã</code>"
        )
        
        await update.message.reply_text(
            formulas_text,
            parse_mode=ParseMode.HTML,
            reply_markup=get_main_menu()
        )
        return ConversationHandler.END
    
    async def positions(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–∫–∞–∑–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π —Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º –≤ –º–µ–Ω—é"""
        positions_text = (
            "üë• <b>–î–æ–ª–∂–Ω–æ—Å—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º–µ:</b>\n\n"
            "üë®‚Äçüíº –û–ø–µ—Ä–∞—Ç–æ—Ä 1-3 –∫–ª–∞—Å—Å–∞\n"
            "üë®‚Äçüíº –ù–û–ü–° –±–µ–∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤\n"
            "üë®‚Äç‚úàÔ∏è –ù–û–ü–° —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º–∏\n"
            "üë®‚Äçüíª –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä\n"
            "üö∂‚Äç‚ôÇÔ∏è –ü–æ—á—Ç–∞–ª—å–æ–Ω\n"
            "üë®‚Äçüî¨ –ì–ª–∞–≤–Ω—ã–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç\n\n"
            "üí° –î–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–µ–º–∏–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>üßÆ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø—Ä–µ–º–∏—é</b>"
        )
        
        await update.message.reply_text(
            positions_text,
            parse_mode=ParseMode.HTML,
            reply_markup=get_main_menu()
        )
        return ConversationHandler.END
    
    async def operations(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–∫–∞–∑–∞ –æ–ø–µ—Ä–∞—Ü–∏–π —Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º –≤ –º–µ–Ω—é"""
        text = "üìä <b>–í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ —Å–∏—Å—Ç–µ–º–µ:</b>\n\n"
        
        for op_id, op_config in OPERATIONS_CONFIG.items():
            emoji = op_config.get('emoji', 'üìä')
            name = op_config['name']
            rate = op_config['rate']
            text += f"{emoji} <b>{op_id}.</b> {name}\n    <i>{rate}</i>\n\n"
        
        # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
        max_length = 4000
        if len(text) > max_length:
            parts = []
            current = ""
            lines = text.split('\n\n')
            
            for line in lines:
                if len(current + line + '\n\n') > max_length:
                    if current:
                        parts.append(current.strip())
                        current = line + '\n\n'
                    else:
                        parts.append(line)
                else:
                    current += line + '\n\n'
            
            if current:
                parts.append(current.strip())
            
            for i, part in enumerate(parts):
                if i == 0:
                    part = "üìä <b>–û–ø–µ—Ä–∞—Ü–∏–∏ (—á–∞—Å—Ç—å 1):</b>\n\n" + part
                else:
                    part = f"üìä <b>–û–ø–µ—Ä–∞—Ü–∏–∏ (—á–∞—Å—Ç—å {i+1}):</b>\n\n" + part
                
                # –ü–æ—Å–ª–µ–¥–Ω—è—è —á–∞—Å—Ç—å - —Å –º–µ–Ω—é
                if i == len(parts) - 1:
                    await update.message.reply_text(
                        part,
                        parse_mode=ParseMode.HTML,
                        reply_markup=get_main_menu()
                    )
                else:
                    await update.message.reply_text(
                        part,
                        parse_mode=ParseMode.HTML
                    )
        else:
            await update.message.reply_text(
                text,
                parse_mode=ParseMode.HTML,
                reply_markup=get_main_menu()
            )
        
        return ConversationHandler.END
    
    async def calculate(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ù–∞—á–∞–ª–æ —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–µ–º–∏–∏"""
        user_id = update.effective_user.id
        user_states[user_id] = UserState()
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ–ª–∂–Ω–æ—Å—Ç—è–º–∏
        keyboard = []
        for pos_id, pos_config in POSITIONS_CONFIG.items():
            keyboard.append([
                InlineKeyboardButton(
                    f"{pos_config['emoji']} {pos_config['name']}", 
                    callback_data=f"pos_{pos_id}"
                )
            ])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
        keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_calc")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "üë• <b>–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –¥–æ–ª–∂–Ω–æ—Å—Ç—å:</b>",
            reply_markup=reply_markup,
            parse_mode=ParseMode.HTML
        )
        
        return CHOOSING_POSITION
    
    async def position_chosen(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏"""
        query = update.callback_query
        await query.answer()
        
        if query.data == "cancel_calc":
            await query.edit_message_text(
                "‚ùå –†–∞—Å—á–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É <b>üßÆ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø—Ä–µ–º–∏—é</b> –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞.",
                parse_mode=ParseMode.HTML
            )
            return ConversationHandler.END
        
        user_id = update.effective_user.id
        position = query.data.replace("pos_", "")
        
        if user_id not in user_states:
            user_states[user_id] = UserState()
        
        user_states[user_id].position = position
        position_config = POSITIONS_CONFIG[position]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω—ã –ª–∏ –ö–ü–ò –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
        if position_config.get('kpi'):
            await query.edit_message_text(
                f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç—å: <b>{position_config['name']}</b>\n\n"
                f"üí∞ –î–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ö–ü–ò —É–∫–∞–∂–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –æ–∫–ª–∞–¥–∞ –ø–æ —Ç—Ä—É–¥–æ–≤–æ–º—É –¥–æ–≥–æ–≤–æ—Ä—É (–≤ —Ä—É–±–ª—è—Ö):\n\n"
                f"üí° –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: <code>30000</code>)",
                parse_mode=ParseMode.HTML
            )
            return ENTERING_SALARY
        else:
            # –î–ª—è –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π –±–µ–∑ –ö–ü–ò —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ—à–∞–≥–æ–≤–æ–º—É –æ–ø—Ä–æ—Å–Ω–∏–∫—É –æ–ø–µ—Ä–∞—Ü–∏–π
            await query.edit_message_text(
                f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç—å: <b>{position_config['name']}</b>",
                parse_mode=ParseMode.HTML
            )
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—à–∞–≥–æ–≤—ã–π –æ–ø—Ä–æ—Å–Ω–∏–∫
            user_states[user_id].available_operations = get_operations_for_position(position)
            user_states[user_id].current_operation_index = 0
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–µ—Ä–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
            return await self.ask_next_operation(update, context)
    
    async def salary_entered(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –æ–∫–ª–∞–¥–∞"""
        user_id = update.effective_user.id
        
        try:
            salary = float(update.message.text.strip().replace(',', '').replace(' ', ''))
            
            if salary <= 0:
                raise ValueError("–û–∫–ª–∞–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
            
            user_states[user_id].base_salary = salary
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ä–∞–∑–º–µ—Ä–∞–º–∏ —Å—Ç–∞–≤–æ–∫
            keyboard = []
            for rate_value, rate_name in POSITION_RATES.items():
                keyboard.append([
                    InlineKeyboardButton(
                        rate_name, 
                        callback_data=f"rate_{rate_value}"
                    )
                ])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
            keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_calc")])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                f"‚úÖ –û–∫–ª–∞–¥: <b>{format_money(salary)}</b>\n\n"
                f"üìä –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –∑–∞–Ω–∏–º–∞–µ–º–æ–π —Å—Ç–∞–≤–∫–∏:",
                reply_markup=reply_markup,
                parse_mode=ParseMode.HTML
            )
            
            return ENTERING_RATE
            
        except ValueError:
            await update.message.reply_text(
                "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ–∫–ª–∞–¥–∞.\n\n"
                "üí° –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –≤ —Ä—É–±–ª—è—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: <code>30000</code>):",
                parse_mode=ParseMode.HTML
            )
            return ENTERING_SALARY
    
    async def rate_chosen(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞ —Å—Ç–∞–≤–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        if query.data == "cancel_calc":
            await query.edit_message_text(
                "‚ùå –†–∞—Å—á–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É <b>üßÆ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø—Ä–µ–º–∏—é</b> –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞.",
                parse_mode=ParseMode.HTML
            )
            return ConversationHandler.END
        
        user_id = update.effective_user.id
        rate = float(query.data.replace("rate_", ""))
        
        user_states[user_id].position_rate = rate
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –æ–∫–ª–∞–¥
        real_salary = user_states[user_id].base_salary * rate
        
        await query.edit_message_text(
            f"‚úÖ –†–∞–∑–º–µ—Ä —Å—Ç–∞–≤–∫–∏: <b>{rate}</b> ({rate*100:.0f}%)\n"
            f"üí∞ –†–µ–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ–∫–ª–∞–¥–∞: <b>{format_money(real_salary)}</b>",
            parse_mode=ParseMode.HTML
        )
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—à–∞–≥–æ–≤—ã–π –æ–ø—Ä–æ—Å–Ω–∏–∫
        user_states[user_id].available_operations = get_operations_for_position(user_states[user_id].position)
        user_states[user_id].current_operation_index = 0
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–µ—Ä–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
        return await self.ask_next_operation(update, context)
    
    async def ask_next_operation(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –æ —Å–ª–µ–¥—É—é—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        user_id = update.effective_user.id
        state = user_states[user_id]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        if state.current_operation_index >= len(state.available_operations):
            # –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∑–∞–¥–∞–Ω—ã, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ö–ü–ò/–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º
            return await self.move_to_kpi_or_coefficients(update, context)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
        current_op_id = state.available_operations[state.current_operation_index]
        operation = OPERATIONS_CONFIG[current_op_id]
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ü–í–ó WB (–æ–ø–µ—Ä–∞—Ü–∏—è #13)
        if current_op_id == 13:  # –û–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –ü–í–ó WB
            keyboard = [
                [InlineKeyboardButton("0", callback_data=f"op_{current_op_id}_0")],
                [
                    InlineKeyboardButton("100", callback_data=f"op_{current_op_id}_100"),
                    InlineKeyboardButton("250", callback_data=f"op_{current_op_id}_250"),
                    InlineKeyboardButton("500", callback_data=f"op_{current_op_id}_500")
                ],
                [
                    InlineKeyboardButton("750", callback_data=f"op_{current_op_id}_750"),
                    InlineKeyboardButton("1000", callback_data=f"op_{current_op_id}_1000"),
                    InlineKeyboardButton("1500", callback_data=f"op_{current_op_id}_1500")
                ],
                [InlineKeyboardButton("‚úèÔ∏è –í–≤–µ—Å—Ç–∏ —Ç–æ—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ", callback_data=f"op_{current_op_id}_custom")],
                [InlineKeyboardButton("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data=f"op_{current_op_id}_skip")],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ä–∞—Å—á–µ—Ç", callback_data="cancel_calc")]
            ]
        else:
            # –û–±—ã—á–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥—Ä—É–≥–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
            keyboard = [
                [InlineKeyboardButton("0", callback_data=f"op_{current_op_id}_0")],
                [
                    InlineKeyboardButton("1", callback_data=f"op_{current_op_id}_1"),
                    InlineKeyboardButton("5", callback_data=f"op_{current_op_id}_5"),
                    InlineKeyboardButton("10", callback_data=f"op_{current_op_id}_10")
                ],
                [
                    InlineKeyboardButton("50", callback_data=f"op_{current_op_id}_50"),
                    InlineKeyboardButton("100", callback_data=f"op_{current_op_id}_100"),
                    InlineKeyboardButton("500", callback_data=f"op_{current_op_id}_500")
                ],
                [InlineKeyboardButton("‚úèÔ∏è –í–≤–µ—Å—Ç–∏ —Ç–æ—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ", callback_data=f"op_{current_op_id}_custom")],
                [InlineKeyboardButton("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data=f"op_{current_op_id}_skip")],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ä–∞—Å—á–µ—Ç", callback_data="cancel_calc")]
            ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        progress = f"({state.current_operation_index + 1}/{len(state.available_operations)})"
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ü–í–ó WB
        if current_op_id == 13:  # –û–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –ü–í–ó WB
            text = (
                f"üìä <b>–û–ø–µ—Ä–∞—Ü–∏—è {progress}:</b>\n\n"
                f"{operation.get('emoji', 'üìä')} <b>{operation['name']}</b>\n"
                f"üí∞ –°—Ç–∞–≤–∫–∞: <i>{operation['rate']}</i>\n"
                f"üìè –ï–¥–∏–Ω–∏—Ü–∞: <i>{operation.get('unit', '')}</i>\n\n"
                f"üìã <b>–ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–∞—Å—á–µ—Ç–∞ –ü–í–ó WB:</b>\n"
                f"üí∞ <b>WB1</b> - –ø—Ä–µ–º–∏—è –ø–æ —Ä–µ–∂–∏–º—É —Ä–∞–±–æ—Ç—ã:\n"
                f"‚Ä¢ 50 –∏ –º–µ–Ω–µ–µ: 0-3000‚ÇΩ\n"
                f"‚Ä¢ 51-100: 1000-3000‚ÇΩ\n"
                f"‚Ä¢ 101-166: 2000-3000‚ÇΩ\n"
                f"‚Ä¢ 167+: 3000‚ÇΩ\n\n"
                f"‚≠ê <b>WB2</b> - –ø—Ä–µ–º–∏—è –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É:\n"
                f"‚Ä¢ 50 –∏ –º–µ–Ω–µ–µ: 0-4500‚ÇΩ\n"
                f"‚Ä¢ 51-100: 1500-4500‚ÇΩ\n"
                f"‚Ä¢ 101-166: 3000-4500‚ÇΩ\n"
                f"‚Ä¢ 167+: 4500‚ÇΩ\n\n"
                f"üèÜ <b>–ò—Ç–æ–≥–æ = WB1 + WB2</b>\n\n"
                f"‚ùì <b>–°–∫–æ–ª—å–∫–æ —É—Å–ª—É–≥ –ü–í–ó WB –æ–∫–∞–∑–∞–Ω–æ –∑–∞ –º–µ—Å—è—Ü?</b>"
            )
        else:
            text = (
                f"üìä <b>–û–ø–µ—Ä–∞—Ü–∏—è {progress}:</b>\n\n"
                f"{operation.get('emoji', 'üìä')} <b>{operation['name']}</b>\n"
                f"üí∞ –°—Ç–∞–≤–∫–∞: <i>{operation['rate']}</i>\n"
                f"üìè –ï–¥–∏–Ω–∏—Ü–∞: <i>{operation.get('unit', '')}</i>\n\n"
                f"‚ùì <b>–°–∫–æ–ª—å–∫–æ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –∑–∞ –º–µ—Å—è—Ü?</b>"
            )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if hasattr(update, 'callback_query') and update.callback_query:
            await update.callback_query.edit_message_text(
                text, reply_markup=reply_markup, parse_mode=ParseMode.HTML
            )
        else:
            await update.message.reply_text(
                text, reply_markup=reply_markup, parse_mode=ParseMode.HTML
            )
        
        return ASKING_OPERATIONS
    
    async def operation_answer_received(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏—é"""
        query = update.callback_query
        await query.answer()
        
        user_id = update.effective_user.id
        state = user_states[user_id]
        
        if query.data == "cancel_calc":
            await query.edit_message_text(
                "‚ùå –†–∞—Å—á–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É <b>üßÆ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø—Ä–µ–º–∏—é</b> –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞.",
                parse_mode=ParseMode.HTML
            )
            return ConversationHandler.END
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–∏—Ñ—Ä–æ–≤–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        if query.data.startswith('op_') and ('_digit_' in query.data or '_qty_' in query.data or '_backspace' in query.data or '_confirm' in query.data or '_text_input' in query.data):
            return await self.numeric_keyboard_handler(update, context)
        
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
        parts = query.data.split('_')
        op_id = int(parts[1])
        value_or_action = parts[2]
        
        if value_or_action == "skip":
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é (–æ—Å—Ç–∞–≤–ª—è–µ–º 0)
            state.operations[op_id] = 0
            state.current_operation_index += 1
            return await self.ask_next_operation(update, context)
        
        elif value_or_action == "custom":
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ü–∏—Ñ—Ä–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            return await self.ask_operation_quantity(update, context)
        
        else:
            # –ë—ã—Å—Ç—Ä—ã–π –≤—ã–±–æ—Ä —á–∏—Å–ª–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
            value = float(value_or_action)
            state.operations[op_id] = value
            
            return await self.process_operation_quantity(update, context, value)

    async def numeric_keyboard_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ü–∏—Ñ—Ä–æ–≤–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
        query = update.callback_query
        await query.answer()
        
        state = context.user_data.get('calc_state')
        if not state:
            user_id = update.effective_user.id
            state = user_states[user_id]
        
        data = query.data
        
        # –ü–∞—Ä—Å–∏–º callback_data: op_{operation_id}_action_value
        if data.startswith('op_') and '_' in data:
            parts = data.split('_')
            if len(parts) >= 3:
                op_id = int(parts[1])
                action = parts[2]
                
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º current_input –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                if not hasattr(state, 'current_input'):
                    state.current_input = ""
                
                if action == "digit" and len(parts) >= 4:
                    # –î–æ–±–∞–≤–ª—è–µ–º —Ü–∏—Ñ—Ä—É
                    digit = parts[3]
                    if len(state.current_input) < 4:  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã
                        state.current_input += digit
                    
                elif action == "backspace":
                    # –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ü–∏—Ñ—Ä—É
                    state.current_input = state.current_input[:-1]
                    
                elif action == "qty" and len(parts) >= 4:
                    # –ë—ã—Å—Ç—Ä—ã–π –≤—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
                    quantity = int(parts[3])
                    state.operations[op_id] = quantity
                    
                    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–∞–∫ –ø—Ä–∏ –æ–±—ã—á–Ω–æ–º –≤–≤–æ–¥–µ
                    return await self.process_operation_quantity(update, context, quantity)
                    
                elif action == "confirm":
                    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –≤–≤–æ–¥
                    try:
                        quantity = int(state.current_input) if state.current_input else 0
                        state.current_input = ""  # –û—á–∏—â–∞–µ–º –≤–≤–æ–¥
                        state.operations[op_id] = quantity
                        
                        return await self.process_operation_quantity(update, context, quantity)
                    except ValueError:
                        await query.edit_message_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                        return ASKING_OPERATION_QUANTITY
                        
                elif action == "text" and parts[3] == "input":
                    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥
                    current_op_id = state.available_operations[state.current_operation_index]
                    operation = OPERATIONS_CONFIG[current_op_id]
                    
                    text = (
                        f"üìã <b>–û–ø–µ—Ä–∞—Ü–∏—è {state.current_operation_index + 1}/{len(state.available_operations)}</b>\n\n"
                        f"{operation['emoji']} <b>{operation['name']}</b>\n"
                        f"{operation['description']}\n\n"
                        f"üî¢ <b>–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∏—Å–ª–æ–º:</b>"
                    )
                    
                    await query.edit_message_text(text, parse_mode=ParseMode.HTML)
                    return ASKING_OPERATION_QUANTITY
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–æ–≤—ã–º current_input
                current_op_id = state.available_operations[state.current_operation_index]
                operation = OPERATIONS_CONFIG[current_op_id]
                
                # –°–æ–∫—Ä–∞—â–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
                short_desc = operation['description']
                if len(short_desc) > 60:
                    short_desc = short_desc[:57] + "..."
                
                text = (
                    f"üìã <b>–û–ø–µ—Ä–∞—Ü–∏—è {state.current_operation_index + 1}/{len(state.available_operations)}</b>\n\n"
                    f"{operation['emoji']} <b>{operation['name']}</b>\n"
                    f"<i>{short_desc}</i>\n\n"
                    f"üìä <b>–¢–µ–∫—É—â–∏–π –≤–≤–æ–¥:</b> {state.current_input or '(–ø—É—Å—Ç–æ)'}\n\n"
                    f"üî¢ <b>–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b>"
                )
                
                max_val = operation.get('max_reasonable', 100)
                await query.edit_message_text(
                    text, 
                    reply_markup=self.create_numeric_keyboard(current_op_id, max_val),
                    parse_mode=ParseMode.HTML
                )
        
        return ASKING_OPERATION_QUANTITY

    async def process_operation_quantity(self, update: Update, context: ContextTypes.DEFAULT_TYPE, quantity: int) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        user_id = update.effective_user.id
        state = user_states[user_id]
        current_op_id = state.available_operations[state.current_operation_index]
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –ü–í–ó WB
        if current_op_id == 13 and quantity > 0:
            operation = OPERATIONS_CONFIG[current_op_id]
            
            if hasattr(update, 'callback_query') and update.callback_query:
                await update.callback_query.edit_message_text(
                    f"‚úÖ {operation['emoji']} <b>{operation['name']}</b>: {quantity} {operation.get('unit', '')}\n\n"
                    f"üìã <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ü–í–ó WB</b>\n\n"
                    f"‚ö° <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –ü–í–ó:</b>",
                    parse_mode=ParseMode.HTML
                )
            else:
                await update.message.reply_text(
                    f"‚úÖ {operation['emoji']} <b>{operation['name']}</b>: {quantity} {operation.get('unit', '')}\n\n"
                    f"üìã <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ü–í–ó WB</b>\n\n"
                    f"‚ö° <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –ü–í–ó:</b>",
                    parse_mode=ParseMode.HTML
                )
            return await self.ask_pvz_schedule(update, context)
        else:
            # –û–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
            operation = OPERATIONS_CONFIG[current_op_id]
            if quantity > 0:
                confirmation = f"‚úÖ {operation['emoji']} <b>{operation['name']}</b>: {quantity} {operation.get('unit', '')}"
            else:
                confirmation = f"‚ö™ {operation['emoji']} <b>{operation['name']}</b>: –Ω–µ –≤—ã–ø–æ–ª–Ω—è–ª–æ—Å—å"
            
            if hasattr(update, 'callback_query') and update.callback_query:
                await update.callback_query.edit_message_text(confirmation, parse_mode=ParseMode.HTML)
            else:
                await update.message.reply_text(confirmation, parse_mode=ParseMode.HTML)
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
            state.current_operation_index += 1
            
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
            await asyncio.sleep(0.5)
            
            return await self.ask_next_operation(update, context)
    
    async def operation_entered(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ –ø–æ—à–∞–≥–æ–≤–æ–º —Ä–µ–∂–∏–º–µ"""
        user_id = update.effective_user.id
        state = user_states[user_id]
        text = update.message.text.strip()
        
        if text == "/cancel":
            return await self.cancel(update, context)
        
        # –í –ø–æ—à–∞–≥–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–µ–º —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ
        try:
            quantity = float(text.replace(',', '').replace(' ', ''))
            
            if quantity < 0:
                raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
            current_op_id = state.available_operations[state.current_operation_index]
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
            state.operations[current_op_id] = quantity
            
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –ü–í–ó WB
            if current_op_id == 13 and quantity > 0:
                # –î–ª—è –ü–í–ó WB –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –¥–∏–∞–ª–æ–≥—É –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                operation = OPERATIONS_CONFIG[current_op_id]
                
                await update.message.reply_text(
                    f"‚úÖ {operation['emoji']} <b>{operation['name']}</b>: {quantity} {operation.get('unit', '')}\n\n"
                    f"üìã <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ü–í–ó WB</b>\n\n"
                    f"‚ö° <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –ü–í–ó:</b>",
                    parse_mode=ParseMode.HTML
                )
                return await self.ask_pvz_schedule(update, context)
            else:
                # –û–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
                operation = OPERATIONS_CONFIG[current_op_id]
                if quantity > 0:
                    confirmation = f"‚úÖ {operation['emoji']} <b>{operation['name']}</b>: {quantity} {operation.get('unit', '')}"
                else:
                    confirmation = f"‚ö™ {operation['emoji']} <b>{operation['name']}</b>: –Ω–µ –≤—ã–ø–æ–ª–Ω—è–ª–æ—Å—å"
                
                await update.message.reply_text(confirmation, parse_mode=ParseMode.HTML)
                
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
                state.current_operation_index += 1
                
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                await asyncio.sleep(0.5)
                
                return await self.ask_next_operation(update, context)
            
        except ValueError:
            await update.message.reply_text(
                f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.\n\n"
                f"üí° –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: <code>1500</code>):",
                parse_mode=ParseMode.HTML
            )
            return ASKING_OPERATIONS
    
    async def move_to_kpi_or_coefficients(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ü–µ—Ä–µ—Ö–æ–¥ –∫ –ö–ü–ò –∏–ª–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–æ–ª–∂–Ω–æ—Å—Ç–∏"""
        user_id = update.effective_user.id
        position = user_states[user_id].position
        position_config = POSITIONS_CONFIG[position]
        
        # –ü–æ–¥–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏ –ø–æ—à–∞–≥–æ–≤–æ–≥–æ –æ–ø—Ä–æ—Å–Ω–∏–∫–∞
        filled_ops = [(op_id, quantity) for op_id, quantity in user_states[user_id].operations.items() if quantity > 0]
        
        ops_text = f"‚úÖ <b>–û–ø—Ä–æ—Å–Ω–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω!</b>\n\n"
        ops_text += f"üìä <b>–û–ø–µ—Ä–∞—Ü–∏–π –∑–∞–ø–æ–ª–Ω–µ–Ω–æ: {len(filled_ops)} –∏–∑ {len(user_states[user_id].available_operations)}</b>\n\n"
        
        if filled_ops:
            ops_text += "üíº <b>–ó–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:</b>\n"
            for op_id, quantity in filled_ops:
                op_config = OPERATIONS_CONFIG[op_id]
                emoji = op_config.get('emoji', 'üìä')
                ops_text += f"{emoji} {op_config['name']}: {quantity} {op_config.get('unit', '')}\n"
        else:
            ops_text += "üìä <b>–û–ø–µ—Ä–∞—Ü–∏–∏:</b> –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã\n"
        
        ops_text += "\n"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω—ã –ª–∏ –ö–ü–ò –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
        if position_config.get('kpi'):
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—à–∞–≥–æ–≤—ã–π –ö–ü–ò –æ–ø—Ä–æ—Å–Ω–∏–∫
            user_states[user_id].available_kpi = position_config['kpi'].copy()
            user_states[user_id].current_kpi_index = 0
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É –æ–ø–µ—Ä–∞—Ü–∏–π
            if hasattr(update, 'callback_query') and update.callback_query:
                await update.callback_query.message.reply_text(
                    f"{ops_text}"
                    f"‚≠ê <b>–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ö–ü–ò –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º...</b>",
                    parse_mode=ParseMode.HTML
                )
            else:
                await update.message.reply_text(
                    f"{ops_text}"
                    f"‚≠ê <b>–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ö–ü–ò –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º...</b>",
                    parse_mode=ParseMode.HTML
                )
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–µ—Ä–≤–æ–º—É –ö–ü–ò
            return await self.ask_next_kpi(update, context)
    
    async def ask_next_kpi(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –æ —Å–ª–µ–¥—É—é—â–µ–º –ö–ü–ò –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ"""
        print(f"[DEBUG] ask_next_kpi triggered")
        
        user_id = update.effective_user.id
        state = user_states[user_id]
        
        print(f"[DEBUG] User {user_id}, Current KPI index: {state.current_kpi_index}, Available KPI: {len(state.available_kpi)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ –ö–ü–ò
        if state.current_kpi_index >= len(state.available_kpi):
            # –í—Å–µ –ö–ü–ò –∑–∞–¥–∞–Ω—ã, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º –∏–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º
            print(f"[DEBUG] All KPIs completed, moving to next stage")
            return await self.move_to_coefficients_or_results(update, context)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ö–ü–ò
        current_kpi_id = state.available_kpi[state.current_kpi_index]
        kpi_config = KPI_CONFIG[current_kpi_id]
        
        print(f"[DEBUG] Asking for KPI: {current_kpi_id} - {kpi_config['name']}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
        keyboard = [
            [InlineKeyboardButton("0%", callback_data=f"kpi_{current_kpi_id}_0")],
            [
                InlineKeyboardButton("50%", callback_data=f"kpi_{current_kpi_id}_50"),
                InlineKeyboardButton("60%", callback_data=f"kpi_{current_kpi_id}_60"),
                InlineKeyboardButton("70%", callback_data=f"kpi_{current_kpi_id}_70")
            ],
            [
                InlineKeyboardButton("80%", callback_data=f"kpi_{current_kpi_id}_80"),
                InlineKeyboardButton("90%", callback_data=f"kpi_{current_kpi_id}_90"),
                InlineKeyboardButton("95%", callback_data=f"kpi_{current_kpi_id}_95")
            ],
            [
                InlineKeyboardButton("100%", callback_data=f"kpi_{current_kpi_id}_100"),
                InlineKeyboardButton("105%", callback_data=f"kpi_{current_kpi_id}_105"),
                InlineKeyboardButton("110%", callback_data=f"kpi_{current_kpi_id}_110")
            ],
            [InlineKeyboardButton("‚úèÔ∏è –í–≤–µ—Å—Ç–∏ —Ç–æ—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ", callback_data=f"kpi_{current_kpi_id}_custom")],
            [InlineKeyboardButton("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data=f"kpi_{current_kpi_id}_skip")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ä–∞—Å—á–µ—Ç", callback_data="cancel_calc")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        progress = f"({state.current_kpi_index + 1}/{len(state.available_kpi)})"
        
        text = (
            f"‚≠ê <b>–ö–ü–ò –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å {progress}:</b>\n\n"
            f"{kpi_config.get('emoji', '‚≠ê')} <b>{kpi_config['name']}</b>\n"
            f"üìù {kpi_config.get('description', '')}\n\n"
            f"‚ùì <b>–ö–∞–∫–æ–π –ø—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è?</b>"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ö–ü–ò
        if hasattr(update, 'callback_query') and update.callback_query:
            await update.callback_query.message.reply_text(
                text, reply_markup=reply_markup, parse_mode=ParseMode.HTML
            )
        else:
            await update.message.reply_text(
                text, reply_markup=reply_markup, parse_mode=ParseMode.HTML
            )
        
        return ASKING_KPI
    
    async def move_to_coefficients_or_results(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ü–µ—Ä–µ—Ö–æ–¥ –∫ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º –∏–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –ø–æ—Å–ª–µ –ö–ü–ò"""
        print(f"[DEBUG] move_to_coefficients_or_results triggered")
        
        user_id = update.effective_user.id
        position = user_states[user_id].position
        position_config = POSITIONS_CONFIG[position]
        
        # –ü–æ–¥–≤–æ–¥–∏–º –∏—Ç–æ–≥ –ö–ü–ò
        filled_kpi = [(kpi_id, value) for kpi_id, value in user_states[user_id].kpi.items() if value > 0]
        
        kpi_text = f"‚úÖ <b>–ö–ü–ò –∑–∞–≤–µ—Ä—à–µ–Ω–æ!</b>\n\n"
        kpi_text += f"‚≠ê <b>–ö–ü–ò –∑–∞–ø–æ–ª–Ω–µ–Ω–æ: {len(filled_kpi)} –∏–∑ {len(user_states[user_id].available_kpi)}</b>\n\n"
        
        if filled_kpi:
            kpi_text += "‚≠ê <b>–ó–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –ö–ü–ò:</b>\n"
            for kpi_id, value in filled_kpi:
                kpi_config = KPI_CONFIG[kpi_id]
                emoji = kpi_config.get('emoji', '‚≠ê')
                kpi_text += f"{emoji} {kpi_config['name']}: {value}%\n"
        else:
            kpi_text += "‚≠ê <b>–ö–ü–ò:</b> –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã\n"
        
        kpi_text += "\n"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω—ã –ª–∏ –∫–æ–º–∞–Ω–¥–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
        if position_config.get('teamCoefficients'):
            return await self.ask_coefficients_with_buttons(update, context, kpi_text)
        
        else:
            # –î–ª—è –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π –±–µ–∑ –ö–ü–ò –∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Ä–∞—Å—á–µ—Ç–∞
            keyboard = [
                [InlineKeyboardButton("üßÆ –†–ê–°–°–ß–ò–¢–ê–¢–¨ –ü–†–ï–ú–ò–Æ", callback_data="final_calculate")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–ª–∏ (callback query –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ)
            if hasattr(update, 'callback_query') and update.callback_query:
                await update.callback_query.message.reply_text(
                    f"{kpi_text}"
                    f"üéØ <b>–í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–±—Ä–∞–Ω—ã!</b>\n\n"
                    f"üí° –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–µ–º–∏–∏:",
                    reply_markup=reply_markup,
                    parse_mode=ParseMode.HTML
                )
            else:
                await update.message.reply_text(
                    f"{kpi_text}"
                    f"üéØ <b>–í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–±—Ä–∞–Ω—ã!</b>\n\n"
                    f"üí° –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–µ–º–∏–∏:",
                    reply_markup=reply_markup,
                    parse_mode=ParseMode.HTML
                )
            return SHOWING_RESULTS
    
    async def ask_coefficients_with_buttons(self, update: Update, context: ContextTypes.DEFAULT_TYPE, kpi_text: str) -> int:
        """–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –æ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞—Ö —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏"""
        user_id = update.effective_user.id
        position_config = POSITIONS_CONFIG[user_states[user_id].position]
        team_coefficients = position_config.get('teamCoefficients', [])
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤
        if not hasattr(user_states[user_id], 'current_coefficient_index'):
            user_states[user_id].current_coefficient_index = 0
            user_states[user_id].available_coefficients = team_coefficients
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
        if user_states[user_id].current_coefficient_index >= len(team_coefficients):
            # –í—Å–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –∑–∞–¥–∞–Ω—ã, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º
            keyboard = [
                [InlineKeyboardButton("üßÆ –†–ê–°–°–ß–ò–¢–ê–¢–¨ –ü–†–ï–ú–ò–Æ", callback_data="final_calculate")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            text = f"‚úÖ <b>–í—Å–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –∑–∞–¥–∞–Ω—ã!</b>\n\nüí° –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–µ–º–∏–∏:"
            
            if hasattr(update, 'callback_query') and update.callback_query:
                await update.callback_query.message.reply_text(
                    text, reply_markup=reply_markup, parse_mode=ParseMode.HTML
                )
            else:
                await update.message.reply_text(
                    text, reply_markup=reply_markup, parse_mode=ParseMode.HTML
                )
            return SHOWING_RESULTS
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç
        current_coeff_id = team_coefficients[user_states[user_id].current_coefficient_index]
        coeff_config = TEAM_COEFFICIENTS_CONFIG[current_coeff_id]
        
        progress = f"({user_states[user_id].current_coefficient_index + 1}/{len(team_coefficients)})"
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ —Å–∫–æ—Ä–æ—Å—Ç–∏
        if current_coeff_id in ['speed_reception', 'speed_delivery']:
            if current_coeff_id == 'speed_reception':
                keyboard = [
                    [InlineKeyboardButton("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ (< 4 –º–∏–Ω)", callback_data=f"coeff_{current_coeff_id}_1.5")],
                    [InlineKeyboardButton("‚ùå –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ (> 4 –º–∏–Ω)", callback_data=f"coeff_{current_coeff_id}_0.5")],
                    [InlineKeyboardButton("‚ö™ –ù–µ –ø—Ä–∏–º–µ–Ω–∏–º–æ", callback_data=f"coeff_{current_coeff_id}_1.0")],
                    [InlineKeyboardButton("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data=f"coeff_{current_coeff_id}_skip")]
                ]
                speed_text = "< 4 –º–∏–Ω = –≤—ã–ø–æ–ª–Ω–µ–Ω–æ, > 4 –º–∏–Ω = –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ"
            else:  # speed_delivery
                keyboard = [
                    [InlineKeyboardButton("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ (< 1:30 –º–∏–Ω)", callback_data=f"coeff_{current_coeff_id}_1.5")],
                    [InlineKeyboardButton("‚ùå –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ (> 1:30 –º–∏–Ω)", callback_data=f"coeff_{current_coeff_id}_0.5")],
                    [InlineKeyboardButton("‚ö™ –ù–µ –ø—Ä–∏–º–µ–Ω–∏–º–æ", callback_data=f"coeff_{current_coeff_id}_1.0")],
                    [InlineKeyboardButton("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data=f"coeff_{current_coeff_id}_skip")]
                ]
                speed_text = "< 1:30 –º–∏–Ω = –≤—ã–ø–æ–ª–Ω–µ–Ω–æ, > 1:30 –º–∏–Ω = –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ"
            
            text = (
                f"‚ö° <b>–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç {progress}:</b>\n\n"
                f"{coeff_config['emoji']} <b>{coeff_config['name']}</b>\n"
                f"üìè –ù–æ—Ä–º–∞: {speed_text}\n\n"
                f"‚ùì <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ —Å–∫–æ—Ä–æ—Å—Ç–∏:</b>"
            )
            
        elif current_coeff_id == 'service':
            # –û–±—ã—á–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è CSI
            keyboard = [
                [
                    InlineKeyboardButton("85", callback_data=f"coeff_{current_coeff_id}_85"),
                    InlineKeyboardButton("90", callback_data=f"coeff_{current_coeff_id}_90"),
                    InlineKeyboardButton("95", callback_data=f"coeff_{current_coeff_id}_95")
                ],
                [
                    InlineKeyboardButton("100", callback_data=f"coeff_{current_coeff_id}_100"),
                    InlineKeyboardButton("‚úèÔ∏è –¢–æ—á–Ω–æ", callback_data=f"coeff_{current_coeff_id}_custom")
                ],
                [InlineKeyboardButton("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data=f"coeff_{current_coeff_id}_skip")]
            ]
            text = (
                f"‚≠ê <b>–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç {progress}:</b>\n\n"
                f"{coeff_config['emoji']} <b>{coeff_config['name']}</b>\n"
                f"üìè –í–ª–∏—è–µ—Ç –Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Ç–∏–ø–∞ 2\n\n"
                f"‚ùì <b>–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ CSI:</b>"
            )
            
        elif current_coeff_id == 'efficiency':
            # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            keyboard = [
                [
                    InlineKeyboardButton("95%", callback_data=f"coeff_{current_coeff_id}_95"),
                    InlineKeyboardButton("100%", callback_data=f"coeff_{current_coeff_id}_100"),
                    InlineKeyboardButton("105%", callback_data=f"coeff_{current_coeff_id}_105")
                ],
                [
                    InlineKeyboardButton("110%", callback_data=f"coeff_{current_coeff_id}_110"),
                    InlineKeyboardButton("‚úèÔ∏è –¢–æ—á–Ω–æ", callback_data=f"coeff_{current_coeff_id}_custom")
                ],
                [InlineKeyboardButton("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data=f"coeff_{current_coeff_id}_skip")]
            ]
            text = (
                f"üìà <b>–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç {progress}:</b>\n\n"
                f"{coeff_config['emoji']} <b>{coeff_config['name']}</b>\n"
                f"üìè –í–ª–∏—è–µ—Ç –Ω–∞ –∏—Ç–æ–≥–æ–≤—É—é –ø—Ä–µ–º–∏—é\n\n"
                f"‚ùì <b>–£–∫–∞–∂–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–ª–∞–Ω–∞ –≤—ã—Ä—É—á–∫–∏:</b>"
            )
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–ª–∏
        if hasattr(update, 'callback_query') and update.callback_query:
            await update.callback_query.edit_message_text(
                text, reply_markup=reply_markup, parse_mode=ParseMode.HTML
            )
        else:
            await update.message.reply_text(
                text, reply_markup=reply_markup, parse_mode=ParseMode.HTML
            )
        
        return ASKING_COEFFICIENTS  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    
    async def coefficient_answer_received(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        user_id = update.effective_user.id
        state = user_states[user_id]
        
        if query.data == "cancel_calc":
            await query.edit_message_text(
                "‚ùå –†–∞—Å—á–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É <b>üßÆ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø—Ä–µ–º–∏—é</b> –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞.",
                parse_mode=ParseMode.HTML
            )
            return ConversationHandler.END
        
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ: coeff_{coefficient_id}_{value}
        parts = query.data.split('_')
        if len(parts) < 3:
            return ASKING_COEFFICIENTS
        
        coeff_id = '_'.join(parts[1:-1])  # –í—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –º–µ–∂–¥—É 'coeff' –∏ value
        value_or_action = parts[-1]
        
        if value_or_action == "skip":
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç (–æ—Å—Ç–∞–≤–ª—è–µ–º 1.0 - –±–∞–∑–æ–≤—ã–π)
            state.team_coefficients[coeff_id] = 1.0
            state.current_coefficient_index += 1
            return await self.ask_coefficients_with_buttons(update, context, "")
        
        elif value_or_action == "custom":
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–æ—á–Ω—ã–π –≤–≤–æ–¥
            coeff_config = TEAM_COEFFICIENTS_CONFIG[coeff_id]
            await query.edit_message_text(
                f"‚úèÔ∏è <b>–¢–æ—á–Ω—ã–π –≤–≤–æ–¥ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞</b>\n\n"
                f"–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è:\n"
                f"{coeff_config['emoji']} <b>{coeff_config['name']}</b>\n\n"
                f"üí° –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: <code>92</code> –¥–ª—è CSI –∏–ª–∏ <code>105</code> –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏):",
                parse_mode=ParseMode.HTML
            )
            return ENTERING_COEFFICIENTS  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É –≤–≤–æ–¥—É
        
        else:
            # –ë—ã—Å—Ç—Ä—ã–π –≤—ã–±–æ—Ä –∑–Ω–∞—á–µ–Ω–∏—è
            try:
                if coeff_id in ['speed_reception', 'speed_delivery']:
                    # –î–ª—è –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ —Å–∫–æ—Ä–æ—Å—Ç–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä—è–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞
                    coefficient_value = float(value_or_action)
                    state.team_coefficients[coeff_id] = coefficient_value
                else:
                    # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–±—É–¥–µ—Ç –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–æ –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–µ)
                    raw_value = float(value_or_action)
                    state.team_coefficients[coeff_id] = raw_value
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                coeff_config = TEAM_COEFFICIENTS_CONFIG[coeff_id]
                if coeff_id in ['speed_reception', 'speed_delivery']:
                    # –î–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    if coefficient_value == 1.5:
                        result_text = "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ"
                    elif coefficient_value == 0.5:
                        result_text = "‚ùå –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ"
                    else:
                        result_text = "‚ö™ –ù–µ –ø—Ä–∏–º–µ–Ω–∏–º–æ"
                    confirmation = f"‚úÖ {coeff_config['emoji']} <b>{coeff_config['name']}</b>: {result_text}"
                else:
                    # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
                    if coeff_id == 'efficiency':
                        confirmation = f"‚úÖ {coeff_config['emoji']} <b>{coeff_config['name']}</b>: {raw_value}%"
                    else:
                        confirmation = f"‚úÖ {coeff_config['emoji']} <b>{coeff_config['name']}</b>: {raw_value}"
                
                await query.edit_message_text(confirmation, parse_mode=ParseMode.HTML)
                
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—É
                state.current_coefficient_index += 1
                
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                await asyncio.sleep(0.5)
                
                return await self.ask_coefficients_with_buttons(update, context, "")
                
            except ValueError:
                return ASKING_COEFFICIENTS
    
    async def kpi_answer_received(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ö–ü–ò –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å"""
        print(f"[DEBUG] kpi_answer_received triggered")
        
        query = update.callback_query
        await query.answer()
        
        user_id = update.effective_user.id
        state = user_states[user_id]
        
        print(f"[DEBUG] User {user_id}, callback data: {query.data}")
        print(f"[DEBUG] Current KPI index: {state.current_kpi_index}, Available KPI: {len(state.available_kpi)}")
        
        if query.data == "cancel_calc":
            await query.edit_message_text(
                "‚ùå –†–∞—Å—á–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É <b>üßÆ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø—Ä–µ–º–∏—é</b> –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞.",
                parse_mode=ParseMode.HTML
            )
            return ConversationHandler.END
        
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ —Å —É—á–µ—Ç–æ–º —á—Ç–æ ID –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–∏–º–≤–æ–ª—ã –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
        parts = query.data.split('_')
        print(f"[DEBUG] Parsed parts: {parts}")
        
        if len(parts) < 3:
            print(f"[ERROR] Invalid callback data format: {query.data}")
            return ASKING_KPI
        
        # –ü—Ä–∞–≤–∏–ª—å–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ–º kpi_id –∏ value - –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç —ç—Ç–æ value
        value_or_action = parts[-1]  # –ü–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç - —ç—Ç–æ action/value
        kpi_id = '_'.join(parts[1:-1])  # –í—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –º–µ–∂–¥—É 'kpi' –∏ value
        
        print(f"[DEBUG] KPI ID: {kpi_id}, Action/Value: {value_or_action}")
        
        if value_or_action == "skip":
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ö–ü–ò (–æ—Å—Ç–∞–≤–ª—è–µ–º 0)
            print(f"[DEBUG] Skipping KPI {kpi_id}")
            state.kpi[kpi_id] = 0
            state.current_kpi_index += 1
            print(f"[DEBUG] New KPI index: {state.current_kpi_index}")
            return await self.ask_next_kpi(update, context)
        
        elif value_or_action == "custom":
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–≤–æ–¥ —Ç–æ—á–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
            print(f"[DEBUG] Custom input for KPI {kpi_id}")
            await query.edit_message_text(
                f"‚úèÔ∏è <b>–¢–æ—á–Ω—ã–π –≤–≤–æ–¥ –ö–ü–ò</b>\n\n"
                f"–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç –¥–ª—è –ö–ü–ò:\n"
                f"{KPI_CONFIG[kpi_id]['emoji']} <b>{KPI_CONFIG[kpi_id]['name']}</b>\n\n"
                f"üí° –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: <code>85</code>):",
                parse_mode=ParseMode.HTML
            )
            return ASKING_KPI  # –û—Å—Ç–∞–µ–º—Å—è –≤ —Ç–æ–º –∂–µ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞
        
        else:
            # –ë—ã—Å—Ç—Ä—ã–π –≤—ã–±–æ—Ä –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
            try:
                value = float(value_or_action)
                print(f"[DEBUG] Setting KPI {kpi_id} = {value}%")
                state.kpi[kpi_id] = value
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                kpi_config = KPI_CONFIG[kpi_id]
                if value > 0:
                    confirmation = f"‚úÖ {kpi_config['emoji']} <b>{kpi_config['name']}</b>: {value}%"
                else:
                    confirmation = f"‚ö™ {kpi_config['emoji']} <b>{kpi_config['name']}</b>: –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ"
                
                await query.edit_message_text(confirmation, parse_mode=ParseMode.HTML)
                
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ö–ü–ò
                state.current_kpi_index += 1
                print(f"[DEBUG] Moving to next KPI, new index: {state.current_kpi_index}")
                
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                await asyncio.sleep(0.5)
                
                return await self.ask_next_kpi(update, context)
                
            except ValueError:
                print(f"[ERROR] Invalid value for KPI: {value_or_action}")
                return ASKING_KPI
    
    async def kpi_entered(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –ö–ü–ò –≤ –ø–æ—à–∞–≥–æ–≤–æ–º —Ä–µ–∂–∏–º–µ"""
        print(f"[DEBUG] kpi_entered triggered")
        
        user_id = update.effective_user.id
        state = user_states[user_id]
        text = update.message.text.strip()
        
        print(f"[DEBUG] User {user_id}, input text: {text}")
        
        if text == "/cancel":
            return await self.cancel(update, context)
        
        # –í –ø–æ—à–∞–≥–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–µ–º —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ
        try:
            percent = float(text.replace(',', '').replace(' ', ''))
            
            if percent < 0 or percent > 200:
                raise ValueError("–ü—Ä–æ—Ü–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0 –¥–æ 200")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ö–ü–ò
            current_kpi_id = state.available_kpi[state.current_kpi_index]
            
            print(f"[DEBUG] Setting KPI {current_kpi_id} = {percent}% (manual input)")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
            state.kpi[current_kpi_id] = percent
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            kpi_config = KPI_CONFIG[current_kpi_id]
            if percent > 0:
                confirmation = f"‚úÖ {kpi_config['emoji']} <b>{kpi_config['name']}</b>: {percent}%"
            else:
                confirmation = f"‚ö™ {kpi_config['emoji']} <b>{kpi_config['name']}</b>: –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ"
            
            await update.message.reply_text(confirmation, parse_mode=ParseMode.HTML)
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ö–ü–ò
            state.current_kpi_index += 1
            print(f"[DEBUG] Moving to next KPI, new index: {state.current_kpi_index}")
            
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
            await asyncio.sleep(0.5)
            
            return await self.ask_next_kpi(update, context)
            
        except ValueError:
            await update.message.reply_text(
                f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.\n\n"
                f"üí° –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 200 (–Ω–∞–ø—Ä–∏–º–µ—Ä: <code>85</code>):",
                parse_mode=ParseMode.HTML
            )
            return ASKING_KPI
    
    async def coefficient_entered(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ (—Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥ –¥–ª—è —Ç–æ—á–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π)"""
        user_id = update.effective_user.id
        state = user_states[user_id]
        text = update.message.text.strip()
        
        if text == "/cancel":
            return await self.cancel(update, context)
        
        try:
            # –í –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ –æ–∂–∏–¥–∞–µ–º —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ (–¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –ø–æ—Å–ª–µ "custom")
            value = float(text.replace(',', '').replace(' ', ''))
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç
            current_coeff_id = state.available_coefficients[state.current_coefficient_index]
            
            if current_coeff_id in ['speed_reception', 'speed_delivery']:
                # –î–ª—è –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ —Å–∫–æ—Ä–æ—Å—Ç–∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ä–µ–º—è –≤ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç
                if current_coeff_id == 'speed_reception':
                    coefficient_value = 1.5 if value < 4 else 0.5
                else:  # speed_delivery
                    coefficient_value = 1.5 if value < 1.5 else 0.5
                state.team_coefficients[current_coeff_id] = coefficient_value
            else:
                # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                if value < 0 or value > 200:
                    raise ValueError("–ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 0 –¥–æ 200")
                state.team_coefficients[current_coeff_id] = value
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            coeff_config = TEAM_COEFFICIENTS_CONFIG[current_coeff_id]
            emoji = coeff_config.get('emoji', 'üìä')
            
            if current_coeff_id in ['speed_reception', 'speed_delivery']:
                result_text = "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ" if coefficient_value == 1.5 else "‚ùå –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ"
                confirmation = f"‚úÖ {emoji} <b>{coeff_config['name']}</b>: {value} –º–∏–Ω ‚Üí {result_text}"
            elif current_coeff_id == 'efficiency':
                confirmation = f"‚úÖ {emoji} <b>{coeff_config['name']}</b>: {value}%"
            else:
                confirmation = f"‚úÖ {emoji} <b>{coeff_config['name']}</b>: {value}"
            
            await update.message.reply_text(confirmation, parse_mode=ParseMode.HTML)
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—É
            state.current_coefficient_index += 1
            
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
            await asyncio.sleep(0.5)
            
            return await self.ask_coefficients_with_buttons(update, context, "")
            
        except ValueError as e:
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞: {str(e)}\n\n"
                f"üí° –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: <code>92</code> –¥–ª—è CSI –∏–ª–∏ <code>3.5</code> –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö):",
                parse_mode=ParseMode.HTML
            )
            return ENTERING_COEFFICIENTS
    
    async def show_results(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–∞—Å—á–µ—Ç–∞"""
        user_id = update.effective_user.id
        state = user_states[user_id]
        
        try:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ü–í–ó WB –ø–µ—Ä–µ–¥ —Ä–∞—Å—á–µ—Ç–æ–º
            self.calculator.set_pvz_params(state.pvz_work_schedule, state.pvz_rating)
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞—Å—á–µ—Ç
            result = self.calculator.calculate_premium(
                position=state.position,
                base_salary=state.base_salary,
                position_rate=state.position_rate,
                operations=state.operations,
                kpi_values=state.kpi,
                team_coefficients=state.team_coefficients,
                subordinates_bonus=state.subordinates_bonus
            )
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            text = f"üéØ <b>–†–ï–ó–£–õ–¨–¢–ê–¢ –†–ê–°–ß–ï–¢–ê –ü–†–ï–ú–ò–ò</b>\n\n"
            text += f"üë§ <b>–î–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {result.position_name}\n"
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–∫–ª–∞–¥–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è –ö–ü–ò –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π)
            if result.base_salary > 0 and result.position_rate > 0:
                text += f"üí∞ <b>–û–∫–ª–∞–¥ –ø–æ –¥–æ–≥–æ–≤–æ—Ä—É:</b> {format_money(result.base_salary)}\n"
                text += f"üìä <b>–†–∞–∑–º–µ—Ä —Å—Ç–∞–≤–∫–∏:</b> {result.position_rate} ({result.position_rate*100:.0f}%)\n"
                text += f"üíµ <b>–†–µ–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ–∫–ª–∞–¥–∞:</b> {format_money(result.real_salary)}\n\n"
            
            # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
            text += f"üèÜ <b>–ò–¢–û–ì–û–í–ê–Ø –ü–†–ï–ú–ò–Ø: {format_money(result.total_premium)}</b>\n\n"
            
            if result.operation_bonus > 0:
                text += f"üìà –ë–æ–Ω—É—Å –∑–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏: <b>{format_money(result.operation_bonus)}</b>\n"
            
            if result.kpi_bonus > 0:
                text += f"‚≠ê –ë–æ–Ω—É—Å –ö–ü–ò: <b>{format_money(result.kpi_bonus)}</b>\n"
            
            text += "\n"
            
            # –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π
            if result.operation_details:
                text += "üìä <b>–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π:</b>\n"
                for detail in result.operation_details:
                    emoji = detail.get('emoji', 'üìä')
                    name = detail['name']
                    quantity = detail['quantity']
                    final_bonus = detail['final_bonus']
                    
                    if detail['coefficient'] != 1.0:
                        text += f"{emoji} {name}: {quantity} ‚Üí {format_money(final_bonus)} (–∫={detail['coefficient']:.1f})\n"
                    else:
                        text += f"{emoji} {name}: {quantity} ‚Üí {format_money(final_bonus)}\n"
                text += "\n"
            
            # –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ö–ü–ò
            if result.kpi_details:
                text += "‚≠ê <b>–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ö–ü–ò:</b>\n"
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                if result.kpi_details:
                    first_detail = result.kpi_details[0]
                    if 'base_kpi_amount' in first_detail:
                        text += f"üí∞ –ë–∞–∑–æ–≤–∞—è —Å—É–º–º–∞ –ö–ü–ò (20% –æ—Ç –æ–∫–ª–∞–¥–∞): <b>{format_money(first_detail['base_kpi_amount'])}</b>\n\n"
                
                for detail in result.kpi_details:
                    emoji = detail.get('emoji', 'üìä')
                    name = detail['name']
                    percent = detail['percent']
                    bonus = detail['bonus']
                    coeff = detail['coefficient']
                    weight = detail.get('weight', 0)
                    
                    text += f"{emoji} {name}: {format_percent(percent)} ‚Üí {format_money(bonus)}\n"
                    text += f"   ‚îî –≤–µ—Å {weight*100:.0f}%, –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç {coeff:.2f}\n"
                text += "\n"
            
            # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
            if result.warnings:
                text += "‚ö†Ô∏è <b>–í–∞–∂–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b>\n"
                for warning in result.warnings:
                    text += f"‚Ä¢ {warning}\n"
                text += "\n"
            
            # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
            keyboard = [
                [InlineKeyboardButton("üîÑ –ù–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç", callback_data="new_calculation")],
                [InlineKeyboardButton("üóëÔ∏è –°–±—Ä–æ—Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞", callback_data="reset_result")],
                [InlineKeyboardButton("üìä –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ä–º—É–ª—ã", callback_data="show_formulas")],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–ª–∏ (callback query –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ)
            if hasattr(update, 'callback_query') and update.callback_query:
                await update.callback_query.message.reply_text(
                    text,
                    reply_markup=reply_markup,
                    parse_mode=ParseMode.HTML
                )
            else:
                await update.message.reply_text(
                    text,
                    reply_markup=reply_markup,
                    parse_mode=ParseMode.HTML
                )
            
            return SHOWING_RESULTS
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ: {e}")
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –ø—Ä–µ–º–∏–∏: {str(e)}\n\n"
                f"üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É <b>üßÆ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø—Ä–µ–º–∏—é</b> –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞.",
                parse_mode=ParseMode.HTML,
                reply_markup=get_main_menu()
            )
            return ConversationHandler.END
    
    async def result_action(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö"""
        query = update.callback_query
        await query.answer()
        
        if query.data == "final_calculate":
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç –ø—Ä–µ–º–∏–∏
            return await self.show_results(update, context)
        
        elif query.data == "new_calculation":
            await query.edit_message_text(
                "üîÑ –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç!\n\n"
                "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É <b>üßÆ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø—Ä–µ–º–∏—é</b> –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞.",
                parse_mode=ParseMode.HTML
            )
            return ConversationHandler.END
        
        elif query.data == "reset_result":
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_id = update.effective_user.id
            if user_id in user_states:
                del user_states[user_id]
            
            await query.edit_message_text(
                "üóëÔ∏è <b>–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–±—Ä–æ—à–µ–Ω!</b>\n\n"
                "‚úÖ –í—Å–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã.\n"
                "üîÑ –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞.\n\n"
                "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É <b>üßÆ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø—Ä–µ–º–∏—é</b>.",
                parse_mode=ParseMode.HTML
            )
            return ConversationHandler.END
        
        elif query.data == "main_menu":
            await query.edit_message_text(
                "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n"
                "üëá –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ:",
                parse_mode=ParseMode.HTML
            )
            return ConversationHandler.END
        
        elif query.data == "show_formulas":
            formulas_text = (
                "üìê <b>–§–æ—Ä–º—É–ª—ã —Ä–∞—Å—á–µ—Ç–∞:</b>\n\n"
                "<b>–ö–ü–ò –±–æ–Ω—É—Å (v2.4):</b>\n"
                "<code>–ö–ü–ò = (–æ–∫–ª–∞–¥ √ó —Å—Ç–∞–≤–∫–∞) √ó –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç_–ö–ü–ò</code>\n\n"
                "<b>–û–ø–µ—Ä–∞—Ü–∏–∏ —Å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º–∏:</b>\n"
                "‚Ä¢ –¢–∏–ø 1: –±–µ–∑ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤\n"
                "‚Ä¢ –¢–∏–ø 2: √ó –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–µ—Ä–≤–∏—Å–∞ (CSI)\n"
                "‚Ä¢ –¢–∏–ø 3: √ó –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –ø—Ä–∏–µ–º–∞\n"
                "‚Ä¢ –¢–∏–ø 4: √ó –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –≤—Ä—É—á–µ–Ω–∏—è\n\n"
                "<b>–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:</b>\n"
                "–ü—Ä–∏ –≤—ã—Ä—É—á–∫–µ ‚â•100%: +30% –∫ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π –ø—Ä–µ–º–∏–∏\n\n"
                "<b>–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∞–≤–∏–ª–æ:</b>\n"
                "–í—ã—Ä—É—á–∫–∞ &lt;80% ‚Üí –ö–ü–ò = 0‚ÇΩ"
            )
            
            # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
            keyboard = [
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É", callback_data="back_to_result")],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                formulas_text,
                reply_markup=reply_markup,
                parse_mode=ParseMode.HTML
            )
            
            return SHOWING_RESULTS
        
        elif query.data == "back_to_result":
            await query.edit_message_text(
                "üîô –í–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º —Ä–∞—Å—á–µ—Ç–∞ –≤—ã—à–µ.\n\n"
                "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:",
                parse_mode=ParseMode.HTML
            )
            return SHOWING_RESULTS
    
    async def cancel(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞—Å—á–µ—Ç–∞"""
        user_id = update.effective_user.id
        if user_id in user_states:
            del user_states[user_id]
        
        await update.message.reply_text(
            "‚ùå –†–∞—Å—á–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω.\n\n"
            "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É <b>üßÆ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø—Ä–µ–º–∏—é</b> –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞.",
            parse_mode=ParseMode.HTML,
            reply_markup=get_main_menu()
        )
        return ConversationHandler.END

    async def ask_pvz_schedule(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ó–∞–ø—Ä–æ—Å —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã –ü–í–ó WB"""
        keyboard = [
            [
                InlineKeyboardButton("üïê –†–µ–∂–∏–º 1: 7 –¥–Ω–µ–π, 11 —á–∞—Å–æ–≤", callback_data="pvz_schedule_—Ä–µ–∂–∏–º1"),
                InlineKeyboardButton("üïï –†–µ–∂–∏–º 2: 5 –¥–Ω–µ–π, 6 —á–∞—Å–æ–≤", callback_data="pvz_schedule_—Ä–µ–∂–∏–º2")
            ],
            [
                InlineKeyboardButton("‚ö° –ü–æ–ª–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ", callback_data="pvz_schedule_–ø–æ–ª–Ω—ã–π"),
                InlineKeyboardButton("‚ùå –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ", callback_data="pvz_schedule_–Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ")
            ],
            [InlineKeyboardButton("üö´ –û—Ç–º–µ–Ω–∞", callback_data="cancel_calc")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        text = (
            "‚ö° <b>–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –ü–í–ó WB:</b>\n\n"
            "üïê <b>–†–µ–∂–∏–º 1:</b> 7 –¥–Ω–µ–π –≤ –Ω–µ–¥–µ–ª—é, –ø–æ 11 —á–∞—Å–æ–≤\n"
            "üïï <b>–†–µ–∂–∏–º 2:</b> –Ω–µ –º–µ–Ω–µ–µ 5 –¥–Ω–µ–π –≤ –Ω–µ–¥–µ–ª—é, –ø–æ 6 —á–∞—Å–æ–≤, –æ–∫–æ–Ω—á–∞–Ω–∏–µ –Ω–µ —Ä–∞–Ω—å—à–µ 20:00\n"
            "‚ö° <b>–ü–æ–ª–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ:</b> —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –æ–±–æ–∏–º –ø–ª–∞–Ω–æ–≤—ã–º —Ä–µ–∂–∏–º–∞–º\n"
            "‚ùå <b>–ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ:</b> –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–ª–∞–Ω–æ–≤—ã–º —Ä–µ–∂–∏–º–∞–º\n\n"
            "‚ùì <b>–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:</b>"
        )
        
        if hasattr(update, 'callback_query') and update.callback_query:
            await update.callback_query.edit_message_text(
                text, reply_markup=reply_markup, parse_mode=ParseMode.HTML
            )
        else:
            await update.message.reply_text(
                text, reply_markup=reply_markup, parse_mode=ParseMode.HTML
            )
        
        return ASKING_PVZ_SCHEDULE
    
    async def pvz_schedule_received(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã –ü–í–ó WB"""
        query = update.callback_query
        await query.answer()
        
        user_id = update.effective_user.id
        state = user_states[user_id]
        
        if query.data == "cancel_calc":
            await query.edit_message_text(
                "‚ùå –†–∞—Å—á–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É <b>üßÆ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø—Ä–µ–º–∏—é</b> –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞.",
                parse_mode=ParseMode.HTML
            )
            return ConversationHandler.END
        
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
        parts = query.data.split('_')
        if len(parts) >= 3:
            schedule = parts[2]  # —Ä–µ–∂–∏–º1, —Ä–µ–∂–∏–º2, –ø–æ–ª–Ω—ã–π, –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
            state.pvz_work_schedule = schedule
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ä–µ–π—Ç–∏–Ω–≥–∞
            await query.edit_message_text(
                f"‚úÖ <b>–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:</b> {schedule}\n\n"
                f"‚≠ê <b>–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ä–µ–π—Ç–∏–Ω–≥—É –ü–í–ó WB...</b>",
                parse_mode=ParseMode.HTML
            )
            
            await asyncio.sleep(0.5)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ —Ä–µ–π—Ç–∏–Ω–≥–∞
            return await self.show_pvz_rating_dialog(query)
        
        return ASKING_PVZ_SCHEDULE
    
    async def show_pvz_rating_dialog(self, query) -> int:
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞ –ü–í–ó WB"""
        keyboard = [
            [
                InlineKeyboardButton("‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê –†–µ–π—Ç–∏–Ω–≥ = 5.0", callback_data="pvz_rating_5.0"),
                InlineKeyboardButton("‚≠ê‚≠ê‚≠ê‚≠ê –†–µ–π—Ç–∏–Ω–≥ 4.9-4.99", callback_data="pvz_rating_4.9")
            ],
            [
                InlineKeyboardButton("‚ö†Ô∏è –†–µ–π—Ç–∏–Ω–≥ –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª", callback_data="pvz_rating_0.1"),
                InlineKeyboardButton("‚ùå –†–µ–π—Ç–∏–Ω–≥ < 4.9", callback_data="pvz_rating_0")
            ],
            [InlineKeyboardButton("üö´ –û—Ç–º–µ–Ω–∞", callback_data="cancel_calc")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        text = (
            "‚≠ê <b>–†–µ–π—Ç–∏–Ω–≥ –ü–í–ó WB:</b>\n\n"
            "‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê <b>–†–µ–π—Ç–∏–Ω–≥ = 5.0</b>\n"
            "‚≠ê‚≠ê‚≠ê‚≠ê <b>4.9 ‚â§ –†–µ–π—Ç–∏–Ω–≥ &lt; 5.0</b>\n"
            "‚ö†Ô∏è <b>–†–µ–π—Ç–∏–Ω–≥ –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª</b>\n"
            "‚ùå <b>–†–µ–π—Ç–∏–Ω–≥ &lt; 4.9 –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª</b>\n\n"
            "‚ùì <b>–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Ä–µ–π—Ç–∏–Ω–≥ –ü–í–ó WB:</b>"
        )
        
        await query.edit_message_text(
            text, reply_markup=reply_markup, parse_mode=ParseMode.HTML
        )
        
        return ASKING_PVZ_RATING
    
    async def ask_pvz_rating(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ó–∞–ø—Ä–æ—Å —Ä–µ–π—Ç–∏–Ω–≥–∞ –ü–í–ó WB (fallback –º–µ—Ç–æ–¥)"""
        if hasattr(update, 'callback_query') and update.callback_query:
            return await self.show_pvz_rating_dialog(update.callback_query)
        else:
            # –î–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            keyboard = [
                [
                    InlineKeyboardButton("‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê –†–µ–π—Ç–∏–Ω–≥ = 5.0", callback_data="pvz_rating_5.0"),
                    InlineKeyboardButton("‚≠ê‚≠ê‚≠ê‚≠ê –†–µ–π—Ç–∏–Ω–≥ 4.9-4.99", callback_data="pvz_rating_4.9")
                ],
                [
                    InlineKeyboardButton("‚ö†Ô∏è –†–µ–π—Ç–∏–Ω–≥ –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª", callback_data="pvz_rating_0.1"),
                    InlineKeyboardButton("‚ùå –†–µ–π—Ç–∏–Ω–≥ < 4.9", callback_data="pvz_rating_0")
                ],
                [InlineKeyboardButton("üö´ –û—Ç–º–µ–Ω–∞", callback_data="cancel_calc")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            text = (
                "‚≠ê <b>–†–µ–π—Ç–∏–Ω–≥ –ü–í–ó WB:</b>\n\n"
                "‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê <b>–†–µ–π—Ç–∏–Ω–≥ = 5.0</b>\n"
                "‚≠ê‚≠ê‚≠ê‚≠ê <b>4.9 ‚â§ –†–µ–π—Ç–∏–Ω–≥ &lt; 5.0</b>\n"
                "‚ö†Ô∏è <b>–†–µ–π—Ç–∏–Ω–≥ –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª</b>\n"
                "‚ùå <b>–†–µ–π—Ç–∏–Ω–≥ &lt; 4.9 –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª</b>\n\n"
                "‚ùì <b>–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Ä–µ–π—Ç–∏–Ω–≥ –ü–í–ó WB:</b>"
            )
            
            await update.message.reply_text(
                text, reply_markup=reply_markup, parse_mode=ParseMode.HTML
            )
            
            return ASKING_PVZ_RATING
    
    async def pvz_rating_received(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞ –ü–í–ó WB"""
        query = update.callback_query
        await query.answer()
        
        user_id = update.effective_user.id
        state = user_states[user_id]
        
        if query.data == "cancel_calc":
            await query.edit_message_text(
                "‚ùå –†–∞—Å—á–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É <b>üßÆ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø—Ä–µ–º–∏—é</b> –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞.",
                parse_mode=ParseMode.HTML
            )
            return ConversationHandler.END
        
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
        parts = query.data.split('_')
        if len(parts) >= 3:
            rating = float(parts[2])
            state.pvz_rating = rating
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –ø—Ä–µ–º–∏—é –∑–∞ –ü–í–ó WB
            from calculator_v2 import PremiumCalculator, format_money
            calculator = PremiumCalculator()
            quantity = int(state.operations[13])
            pvz_bonus = calculator.calculate_pvz_wb_bonus(quantity, state.pvz_work_schedule, state.pvz_rating)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç –ü–í–ó WB
            rating_text = {
                5.0: "‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê –†–µ–π—Ç–∏–Ω–≥ = 5.0",
                4.9: "‚≠ê‚≠ê‚≠ê‚≠ê –†–µ–π—Ç–∏–Ω–≥ 4.9-4.99", 
                0.1: "‚ö†Ô∏è –†–µ–π—Ç–∏–Ω–≥ –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª",
                0: "‚ùå –†–µ–π—Ç–∏–Ω–≥ < 4.9"
            }.get(rating, f"–†–µ–π—Ç–∏–Ω–≥: {rating}")
            
            schedule_text = {
                "—Ä–µ–∂–∏–º1": "üïê –†–µ–∂–∏–º 1: 7 –¥–Ω–µ–π, 11 —á–∞—Å–æ–≤",
                "—Ä–µ–∂–∏–º2": "üïï –†–µ–∂–∏–º 2: 5 –¥–Ω–µ–π, 6 —á–∞—Å–æ–≤", 
                "–ø–æ–ª–Ω—ã–π": "‚ö° –ü–æ–ª–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ",
                "–Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ": "‚ùå –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ"
            }.get(state.pvz_work_schedule, state.pvz_work_schedule)
            
            await query.edit_message_text(
                f"‚úÖ <b>–ü–í–ó WB –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ!</b>\n\n"
                f"üè¢ <b>–û–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –ü–í–ó WB:</b> {quantity} —É—Å–ª—É–≥\n"
                f"{schedule_text}\n"
                f"{rating_text}\n\n"
                f"üí∞ <b>–ò—Ç–æ–≥–æ –ø—Ä–µ–º–∏—è –ü–í–ó WB:</b> {format_money(pvz_bonus)}\n\n"
                f"‚û°Ô∏è <b>–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏...</b>",
                parse_mode=ParseMode.HTML
            )
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
            state.current_operation_index += 1
            
            await asyncio.sleep(1.0)
            return await self.ask_next_operation(update, context)
        
        return ASKING_PVZ_RATING

    def create_numeric_keyboard(self, operation_id: int, max_value: int = 50) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞—Ç—å —Ü–∏—Ñ—Ä–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞"""
        keyboard = []
        
        # –ë—ã—Å—Ç—Ä—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        quick_values = [1, 5, 10, 20, 50] if max_value >= 50 else [1, 5, 10, max_value]
        quick_row = []
        for val in quick_values:
            if val <= max_value:
                quick_row.append(InlineKeyboardButton(f"{val}", callback_data=f"op_{operation_id}_qty_{val}"))
        if quick_row:
            keyboard.append(quick_row)
        
        # –¶–∏—Ñ—Ä–æ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ 3x3
        keyboard.extend([
            [
                InlineKeyboardButton("1", callback_data=f"op_{operation_id}_digit_1"),
                InlineKeyboardButton("2", callback_data=f"op_{operation_id}_digit_2"),
                InlineKeyboardButton("3", callback_data=f"op_{operation_id}_digit_3")
            ],
            [
                InlineKeyboardButton("4", callback_data=f"op_{operation_id}_digit_4"),
                InlineKeyboardButton("5", callback_data=f"op_{operation_id}_digit_5"),
                InlineKeyboardButton("6", callback_data=f"op_{operation_id}_digit_6")
            ],
            [
                InlineKeyboardButton("7", callback_data=f"op_{operation_id}_digit_7"),
                InlineKeyboardButton("8", callback_data=f"op_{operation_id}_digit_8"),
                InlineKeyboardButton("9", callback_data=f"op_{operation_id}_digit_9")
            ],
            [
                InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f"op_{operation_id}_backspace"),
                InlineKeyboardButton("0", callback_data=f"op_{operation_id}_digit_0"),
                InlineKeyboardButton("‚úÖ", callback_data=f"op_{operation_id}_confirm")
            ]
        ])
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        keyboard.extend([
            [
                InlineKeyboardButton("‚ö™ –ù–µ –≤—ã–ø–æ–ª–Ω—è–ª–æ—Å—å", callback_data=f"op_{operation_id}_qty_0"),
                InlineKeyboardButton("üìù –í–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–æ–º", callback_data=f"op_{operation_id}_text_input")
            ],
            [
                InlineKeyboardButton("üö´ –û—Ç–º–µ–Ω–∞", callback_data="cancel_calc")
            ]
        ])
        
        return InlineKeyboardMarkup(keyboard)

    async def ask_operation_quantity(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ó–∞–ø—Ä–æ—Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º UI"""
        user_id = update.effective_user.id
        state = user_states.get(user_id)
        if not state:
            return ConversationHandler.END
            
        current_op_id = state.available_operations[state.current_operation_index]
        operation = OPERATIONS_CONFIG[current_op_id]
        
        # –°–æ–∫—Ä–∞—â–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –º–µ—Å—Ç–∞
        short_desc = operation['description']
        if len(short_desc) > 60:
            short_desc = short_desc[:57] + "..."
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç —Å –∫–æ–º–ø–∞–∫—Ç–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        text = (
            f"üìã <b>–û–ø–µ—Ä–∞—Ü–∏—è {state.current_operation_index + 1}/{len(state.available_operations)}</b>\n\n"
            f"{operation['emoji']} <b>{operation['name']}</b>\n"
            f"<i>{short_desc}</i>\n\n"
            f"üìä <b>–¢–µ–∫—É—â–∏–π –≤–≤–æ–¥:</b> {getattr(state, 'current_input', '')}\n\n"
            f"üî¢ <b>–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b>"
        )
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞–∑—É–º–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        max_val = operation.get('max_reasonable', 100)
        
        if hasattr(update, 'callback_query') and update.callback_query:
            await update.callback_query.edit_message_text(
                text, 
                reply_markup=self.create_numeric_keyboard(current_op_id, max_val),
                parse_mode=ParseMode.HTML
            )
        else:
            await update.message.reply_text(
                text, 
                reply_markup=self.create_numeric_keyboard(current_op_id, max_val),
                parse_mode=ParseMode.HTML
            )
        
        return ASKING_OPERATION_QUANTITY


def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    print(f"–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –∫–Ω–æ–ø–æ—á–Ω—ã–º –º–µ–Ω—é...")
    print(f"–¢–æ–∫–µ–Ω: {TOKEN[:10]}...")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(TOKEN).build()
    bot = CleanPremiumBot()
    
    # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
    conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler("calculate", bot.calculate),
            MessageHandler(filters.TEXT & filters.Regex("^üßÆ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø—Ä–µ–º–∏—é$"), bot.calculate)
        ],
        states={
            CHOOSING_POSITION: [CallbackQueryHandler(bot.position_chosen, pattern="^pos_|^cancel_calc$")],
            ENTERING_SALARY: [MessageHandler(filters.TEXT & ~filters.COMMAND, bot.salary_entered)],
            ENTERING_RATE: [CallbackQueryHandler(bot.rate_chosen, pattern="^rate_|^cancel_calc$")],
            ASKING_OPERATIONS: [
                CallbackQueryHandler(bot.operation_answer_received, pattern="^op_|^cancel_calc$"),
                MessageHandler(filters.TEXT, bot.operation_entered)
            ],
            ASKING_OPERATION_QUANTITY: [
                CallbackQueryHandler(bot.numeric_keyboard_handler, pattern="^op_.*_(digit|qty|backspace|confirm|text_input)_|^cancel_calc$"),
                MessageHandler(filters.TEXT, bot.operation_entered)
            ],
            ASKING_PVZ_SCHEDULE: [CallbackQueryHandler(bot.pvz_schedule_received, pattern="^pvz_schedule_|^cancel_calc$")],
            ASKING_PVZ_RATING: [CallbackQueryHandler(bot.pvz_rating_received, pattern="^pvz_rating_|^cancel_calc$")],
            ASKING_KPI: [
                CallbackQueryHandler(bot.kpi_answer_received, pattern="^kpi_|^cancel_calc$"),
                MessageHandler(filters.TEXT, bot.kpi_entered)
            ],
            ASKING_COEFFICIENTS: [
                CallbackQueryHandler(bot.coefficient_answer_received, pattern="^coeff_|^cancel_calc$")
            ],
            ENTERING_COEFFICIENTS: [MessageHandler(filters.TEXT, bot.coefficient_entered)],
            SHOWING_RESULTS: [CallbackQueryHandler(bot.result_action, pattern="^final_calculate$|^new_calculation$|^reset_result$|^main_menu$|^show_formulas$|^back_to_result$")]
        },
        fallbacks=[CommandHandler("cancel", bot.cancel)]
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(conv_handler)
    application.add_handler(CommandHandler("start", bot.start))
    application.add_handler(CommandHandler("help", bot.help_command))
    application.add_handler(MessageHandler(
        filters.TEXT & filters.Regex("^(üìã –°–ø–∏—Å–æ–∫ –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π|üìä –°–ø–∏—Å–æ–∫ –æ–ø–µ—Ä–∞—Ü–∏–π|‚ùì –°–ø—Ä–∞–≤–∫–∞|üÜò –ü–æ–º–æ—â—å|üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —Ä–∞—Å—á–µ—Ç)$"), 
        bot.handle_menu_buttons
    ))
    
    print("üöÄ –ë–æ—Ç —Å –∫–Ω–æ–ø–æ—á–Ω—ã–º –º–µ–Ω—é –∑–∞–ø—É—â–µ–Ω!")
    print("üì± –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–Ω–æ–ø–∫–∏:")
    print("   üßÆ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø—Ä–µ–º–∏—é")
    print("   üìã –°–ø–∏—Å–æ–∫ –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π")  
    print("   üìä –°–ø–∏—Å–æ–∫ –æ–ø–µ—Ä–∞—Ü–∏–π")
    print("   ‚ùì –°–ø—Ä–∞–≤–∫–∞")
    print("   üÜò –ü–æ–º–æ—â—å")
    print("   üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —Ä–∞—Å—á–µ—Ç")
    print("\nüõë –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
    
    application.run_polling()


if __name__ == "__main__":
    main() 