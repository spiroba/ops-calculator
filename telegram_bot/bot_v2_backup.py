#!/usr/bin/env python3
"""
Telegram –±–æ—Ç –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–µ–º–∏–π –û–ü–° v2.4
–ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å HTML –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–æ–º –ø—Ä–µ–º–∏–π
"""

import logging
from typing import Dict, Any
from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup, 
    ReplyKeyboardMarkup, KeyboardButton
)
from telegram.constants import ParseMode
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler, 
    MessageHandler, filters, ConversationHandler, ContextTypes
)

from config_v2 import (
    TOKEN, MESSAGES, POSITIONS_CONFIG, OPERATIONS_CONFIG, 
    KPI_CONFIG, TEAM_COEFFICIENTS_CONFIG, POSITION_RATES,
    UserState
)
from calculator_v2 import PremiumCalculator, format_money, format_percent

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
(CHOOSING_POSITION, ENTERING_SALARY, ENTERING_RATE,
 ENTERING_OPERATIONS, ENTERING_KPI, ENTERING_COEFFICIENTS,
 SHOWING_RESULTS, ENTERING_SUBORDINATES) = range(8)

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

class PremiumBot:
    """–ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –±–æ—Ç–∞ –ø—Ä–µ–º–∏–π –û–ü–°"""
    
    def __init__(self):
        self.calculator = PremiumCalculator()
    
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        user_id = update.effective_user.id
        user_states[user_id] = UserState()
        
        await update.message.reply_text(
            MESSAGES["start"],
            parse_mode=ParseMode.HTML
        )
        return ConversationHandler.END
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ö–æ–º–∞–Ω–¥–∞ /help"""
        await update.message.reply_text(
            MESSAGES["help"],
            parse_mode=ParseMode.HTML
        )
        return ConversationHandler.END
    
    async def positions(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ö–æ–º–∞–Ω–¥–∞ /positions - —Å–ø–∏—Å–æ–∫ –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π"""
        await update.message.reply_text(
            MESSAGES["positions"],
            parse_mode=ParseMode.HTML
        )
        return ConversationHandler.END
    
    async def operations(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ö–æ–º–∞–Ω–¥–∞ /operations - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""
        text = "üìä <b>–í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ —Å–∏—Å—Ç–µ–º–µ:</b>\n\n"
        
        for op_id, op_config in OPERATIONS_CONFIG.items():
            emoji = op_config.get('emoji', 'üìä')
            name = op_config['name']
            rate = op_config['rate']
            text += f"{emoji} <b>{op_id}.</b> {name}\n    {rate}_\n\n"
        
        # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
        if len(text) > 4000:
            parts = text.split('\n\n')
            current = ""
            for part in parts:
                if len(current + part) > 4000:
                    await update.message.reply_text(
                        current,
                        parse_mode=ParseMode.HTML
                    )
                    current = part + "\n\n"
                else:
                    current += part + "\n\n"
            
            if current:
                await update.message.reply_text(
                    current,
                    parse_mode=ParseMode.HTML
                )
        else:
            await update.message.reply_text(
                text,
                parse_mode=ParseMode.HTML
            )
        
        return ConversationHandler.END
    
    async def calculate(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ù–∞—á–∞–ª–æ —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–µ–º–∏–∏"""
        user_id = update.effective_user.id
        user_states[user_id] = UserState()
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ–ª–∂–Ω–æ—Å—Ç—è–º–∏
        keyboard = []
        for pos_id, pos_config in POSITIONS_CONFIG.items():
            keyboard.append([
                InlineKeyboardButton(
                    f"{pos_config['emoji']} {pos_config['name']}", 
                                         callback_data=f"pos_{pos_id}"
                )
            ])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "üë• <b>–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –¥–æ–ª–∂–Ω–æ—Å—Ç—å:</b>",
            reply_markup=reply_markup,
            parse_mode=ParseMode.HTML
        )
        
        return CHOOSING_POSITION
    
    async def position_chosen(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏"""
        query = update.callback_query
        await query.answer()
        
                 user_id = update.effective_user.id
         position = query.data.replace("pos_", "")
        
        if user_id not in user_states:
            user_states[user_id] = UserState()
        
        user_states[user_id].position = position
        position_config = POSITIONS_CONFIG[position]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω—ã –ª–∏ –ö–ü–ò –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
        if position_config.get('kpi'):
            await query.edit_message_text(
                f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç—å: <b>{position_config['name']}</b>\n\n"
                f"üí∞ –î–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ö–ü–ò —É–∫–∞–∂–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –æ–∫–ª–∞–¥–∞ –ø–æ —Ç—Ä—É–¥–æ–≤–æ–º—É –¥–æ–≥–æ–≤–æ—Ä—É (–≤ —Ä—É–±–ª—è—Ö):",
                parse_mode=ParseMode.HTML
            )
            return ENTERING_SALARY
        else:
            # –î–ª—è –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π –±–µ–∑ –ö–ü–ò —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–ø–µ—Ä–∞—Ü–∏—è–º
            await query.edit_message_text(
                f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç—å: <b>{position_config['name']}</b>\n\n"
                f"üìä –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –æ–ø–µ—Ä–∞—Ü–∏—è–º.\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: `–Ω–æ–º–µ—Ä –æ–ø–µ—Ä–∞—Ü–∏–∏: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ`\n"
                f"–ù–∞–ø—Ä–∏–º–µ—Ä: `1: 5000` (—Ä–æ–∑–Ω–∏—Ü–∞ 5000‚ÇΩ)\n\n"
                f"–í–≤–µ–¥–∏—Ç–µ /operations –¥–ª—è —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π.\n"
                f"–í–≤–µ–¥–∏—Ç–µ /done –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ.",
                parse_mode=ParseMode.HTML
            )
            return ENTERING_OPERATIONS
    
    async def salary_entered(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –æ–∫–ª–∞–¥–∞"""
        user_id = update.effective_user.id
        
        try:
            salary = float(update.message.text.replace(',', '').replace(' ', ''))
            if salary <= 0:
                raise ValueError("–û–∫–ª–∞–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
            
            user_states[user_id].base_salary = salary
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ä–∞–∑–º–µ—Ä–∞–º–∏ —Å—Ç–∞–≤–æ–∫
            keyboard = []
            for rate_value, rate_name in POSITION_RATES.items():
                keyboard.append([
                    InlineKeyboardButton(
                        rate_name, 
                                                 callback_data=f"rate_{rate_value}"
                    )
                ])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                f"‚úÖ –û–∫–ª–∞–¥: <b>{format_money(salary)}</b>\n\n"
                f"üìä –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –∑–∞–Ω–∏–º–∞–µ–º–æ–π —Å—Ç–∞–≤–∫–∏:",
                reply_markup=reply_markup,
                parse_mode=ParseMode.HTML
            )
            
            return ENTERING_RATE
            
        except ValueError:
            await update.message.reply_text(
                "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ–∫–ª–∞–¥–∞. "
                "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –≤ —Ä—É–±–ª—è—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 30000):",
                parse_mode=ParseMode.HTML
            )
            return ENTERING_SALARY
    
    async def rate_chosen(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞ —Å—Ç–∞–≤–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        user_id = update.effective_user.id
        rate = float(query.data.replace("rate_", ""))
        
        user_states[user_id].position_rate = rate
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –æ–∫–ª–∞–¥
        real_salary = user_states[user_id].base_salary * rate
        
        await query.edit_message_text(
            f"‚úÖ –†–∞–∑–º–µ—Ä —Å—Ç–∞–≤–∫–∏: <b>{rate}</b> ({rate*100:.0f}%)\n"
            f"üí∞ –†–µ–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ–∫–ª–∞–¥–∞: <b>{format_money(real_salary)}</b>\n\n"
            f"üìä –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –æ–ø–µ—Ä–∞—Ü–∏—è–º.\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: `–Ω–æ–º–µ—Ä –æ–ø–µ—Ä–∞—Ü–∏–∏: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ`\n"
            f"–ù–∞–ø—Ä–∏–º–µ—Ä: `1: 5000` (—Ä–æ–∑–Ω–∏—Ü–∞ 5000‚ÇΩ)\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ /operations –¥–ª—è —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π.\n"
            f"–í–≤–µ–¥–∏—Ç–µ /done –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ.",
            parse_mode=ParseMode.HTML
        )
        
        return ENTERING_OPERATIONS
    
    async def operation_entered(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        user_id = update.effective_user.id
        text = update.message.text.strip()
        
        if text == "/done":
            return await self.move_to_kpi_or_coefficients(update, context)
        elif text == "/operations":
            await self.operations(update, context)
            return ENTERING_OPERATIONS
        
        try:
            # –ü–∞—Ä—Å–∏–º —Ñ–æ—Ä–º–∞—Ç "–Ω–æ–º–µ—Ä: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ"
            if ':' not in text:
                raise ValueError("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç '–Ω–æ–º–µ—Ä: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ'")
            
            op_id_str, quantity_str = text.split(':', 1)
            op_id = int(op_id_str.strip())
            quantity = float(quantity_str.strip().replace(',', '').replace(' ', ''))
            
            if op_id not in OPERATIONS_CONFIG:
                raise ValueError(f"–û–ø–µ—Ä–∞—Ü–∏—è {op_id} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            
            if quantity < 0:
                raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é
            user_states[user_id].operations[op_id] = quantity
            
            op_config = OPERATIONS_CONFIG[op_id]
            emoji = op_config.get('emoji', 'üìä')
            
            await update.message.reply_text(
                f"‚úÖ {emoji} <b>{op_config['name']}</b>: {quantity} {op_config.get('unit', '')}\n\n"
                f"–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤–≤–æ–¥–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏–ª–∏ /done –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.",
                parse_mode=ParseMode.HTML
            )
            
            return ENTERING_OPERATIONS
            
        except (ValueError, IndexError) as e:
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞: {str(e)}\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: `–Ω–æ–º–µ—Ä –æ–ø–µ—Ä–∞—Ü–∏–∏: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ`\n"
                f"–ù–∞–ø—Ä–∏–º–µ—Ä: `1: 5000`",
                parse_mode=ParseMode.HTML
            )
            return ENTERING_OPERATIONS
    
    async def move_to_kpi_or_coefficients(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ü–µ—Ä–µ—Ö–æ–¥ –∫ –ö–ü–ò –∏–ª–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–æ–ª–∂–Ω–æ—Å—Ç–∏"""
        user_id = update.effective_user.id
        position = user_states[user_id].position
        position_config = POSITIONS_CONFIG[position]
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        ops_text = "üìä <b>–í–≤–µ–¥–µ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:</b>\n\n"
        for op_id, quantity in user_states[user_id].operations.items():
            op_config = OPERATIONS_CONFIG[op_id]
            emoji = op_config.get('emoji', 'üìä')
            ops_text += f"{emoji} {op_config['name']}: {quantity} {op_config.get('unit', '')}\n"
        
        if not user_states[user_id].operations:
            ops_text += "–û–ø–µ—Ä–∞—Ü–∏–∏ –Ω–µ –≤–≤–µ–¥–µ–Ω—ã_\n"
        
        ops_text += "\n"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ö–ü–ò –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
        if position_config.get('kpi'):
            kpi_list = ""
            for kpi_id in position_config['kpi']:
                kpi_config = KPI_CONFIG[kpi_id]
                emoji = kpi_config.get('emoji', 'üìä')
                kpi_list += f"{emoji} {kpi_config['name']}\n"
            
            await update.message.reply_text(
                f"{ops_text}"
                f"‚≠ê <b>–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ö–ü–ò –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:</b>\n\n"
                f"{kpi_list}\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: `–ø–æ–∫–∞–∑–∞—Ç–µ–ª—å: –ø—Ä–æ—Ü–µ–Ω—Ç`\n"
                f"–ù–∞–ø—Ä–∏–º–µ—Ä: `revenue: 95` (–≤—ã—Ä—É—á–∫–∞ 95%)\n\n"
                f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏: {', '.join(position_config['kpi'])}\n"
                f"–í–≤–µ–¥–∏—Ç–µ /done –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ.",
                parse_mode=ParseMode.HTML
            )
            return ENTERING_KPI
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–º–∞–Ω–¥–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
        elif position_config.get('teamCoefficients'):
            coeff_list = ""
            for coeff_id in position_config['teamCoefficients']:
                coeff_config = TEAM_COEFFICIENTS_CONFIG[coeff_id]
                emoji = coeff_config.get('emoji', 'üìä')
                coeff_list += f"{emoji} {coeff_config['name']}\n"
            
            await update.message.reply_text(
                f"{ops_text}"
                f"‚ö° <b>–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã:</b>\n\n"
                f"{coeff_list}\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: `–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: –∑–Ω–∞—á–µ–Ω–∏–µ`\n"
                f"–ù–∞–ø—Ä–∏–º–µ—Ä: `service: 92` (CSI 92 –±–∞–ª–ª–∞)\n\n"
                f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã: {', '.join(position_config['teamCoefficients'])}\n"
                f"–í–≤–µ–¥–∏—Ç–µ /done –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ.",
                parse_mode=ParseMode.HTML
            )
            return ENTERING_COEFFICIENTS
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏ –ö–ü–ò, –Ω–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ - —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        else:
            return await self.show_results(update, context)
    
    async def kpi_entered(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –ö–ü–ò"""
        user_id = update.effective_user.id
        text = update.message.text.strip()
        
        if text == "/done":
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º –∏–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º
            position = user_states[user_id].position
            position_config = POSITIONS_CONFIG[position]
            
            if position_config.get('teamCoefficients'):
                coeff_list = ""
                for coeff_id in position_config['teamCoefficients']:
                    coeff_config = TEAM_COEFFICIENTS_CONFIG[coeff_id]
                    emoji = coeff_config.get('emoji', 'üìä')
                    coeff_list += f"{emoji} {coeff_config['name']}\n"
                
                await update.message.reply_text(
                    f"‚ö° <b>–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã:</b>\n\n"
                    f"{coeff_list}\n"
                    f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: `–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: –∑–Ω–∞—á–µ–Ω–∏–µ`\n"
                    f"–ù–∞–ø—Ä–∏–º–µ—Ä: `service: 92`\n\n"
                    f"–î–æ—Å—Ç—É–ø–Ω—ã–µ: {', '.join(position_config['teamCoefficients'])}\n"
                    f"–í–≤–µ–¥–∏—Ç–µ /done –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ.",
                    parse_mode=ParseMode.HTML
                )
                return ENTERING_COEFFICIENTS
            else:
                return await self.show_results(update, context)
        
        try:
            # –ü–∞—Ä—Å–∏–º —Ñ–æ—Ä–º–∞—Ç "–ø–æ–∫–∞–∑–∞—Ç–µ–ª—å: –ø—Ä–æ—Ü–µ–Ω—Ç"
            if ':' not in text:
                raise ValueError("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç '–ø–æ–∫–∞–∑–∞—Ç–µ–ª—å: –ø—Ä–æ—Ü–µ–Ω—Ç'")
            
            kpi_id, percent_str = text.split(':', 1)
            kpi_id = kpi_id.strip()
            percent = float(percent_str.strip())
            
            position_config = POSITIONS_CONFIG[user_states[user_id].position]
            if kpi_id not in position_config.get('kpi', []):
                raise ValueError(f"–ö–ü–ò '{kpi_id}' –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –≤–∞—à–µ–π –¥–æ–ª–∂–Ω–æ—Å—Ç–∏")
            
            if percent < 0:
                raise ValueError("–ü—Ä–æ—Ü–µ–Ω—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ö–ü–ò
            user_states[user_id].kpi[kpi_id] = percent
            
            kpi_config = KPI_CONFIG[kpi_id]
            emoji = kpi_config.get('emoji', 'üìä')
            
            await update.message.reply_text(
                f"‚úÖ {emoji} <b>{kpi_config['name']}</b>: {format_percent(percent)}\n\n"
                f"–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤–≤–æ–¥–∏—Ç—å –ö–ü–ò –∏–ª–∏ /done –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.",
                parse_mode=ParseMode.HTML
            )
            
            return ENTERING_KPI
            
        except (ValueError, IndexError) as e:
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞: {str(e)}\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: `–ø–æ–∫–∞–∑–∞—Ç–µ–ª—å: –ø—Ä–æ—Ü–µ–Ω—Ç`\n"
                f"–ù–∞–ø—Ä–∏–º–µ—Ä: `revenue: 95`",
                parse_mode=ParseMode.HTML
            )
            return ENTERING_KPI
    
    async def coefficient_entered(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞"""
        user_id = update.effective_user.id
        text = update.message.text.strip()
        
        if text == "/done":
            return await self.show_results(update, context)
        
        try:
            # –ü–∞—Ä—Å–∏–º —Ñ–æ—Ä–º–∞—Ç "–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: –∑–Ω–∞—á–µ–Ω–∏–µ"
            if ':' not in text:
                raise ValueError("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç '–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: –∑–Ω–∞—á–µ–Ω–∏–µ'")
            
            coeff_id, value_str = text.split(':', 1)
            coeff_id = coeff_id.strip()
            value = float(value_str.strip())
            
            position_config = POSITIONS_CONFIG[user_id]
            if coeff_id not in position_config.get('teamCoefficients', []):
                raise ValueError(f"–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç '{coeff_id}' –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –≤–∞—à–µ–π –¥–æ–ª–∂–Ω–æ—Å—Ç–∏")
            
            if value < 0:
                raise ValueError("–ó–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç
            user_states[user_id].team_coefficients[coeff_id] = value
            
            coeff_config = TEAM_COEFFICIENTS_CONFIG[coeff_id]
            emoji = coeff_config.get('emoji', 'üìä')
            
            await update.message.reply_text(
                f"‚úÖ {emoji} <b>{coeff_config['name']}</b>: {value}\n\n"
                f"–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤–≤–æ–¥–∏—Ç—å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –∏–ª–∏ /done –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.",
                parse_mode=ParseMode.HTML
            )
            
            return ENTERING_COEFFICIENTS
            
        except (ValueError, IndexError) as e:
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞: {str(e)}\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: `–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: –∑–Ω–∞—á–µ–Ω–∏–µ`\n"
                f"–ù–∞–ø—Ä–∏–º–µ—Ä: `service: 92`",
                parse_mode=ParseMode.HTML
            )
            return ENTERING_COEFFICIENTS
    
    async def show_results(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–∞—Å—á–µ—Ç–∞"""
        user_id = update.effective_user.id
        state = user_states[user_id]
        
        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞—Å—á–µ—Ç
            result = self.calculator.calculate_premium(
                position=state.position,
                base_salary=state.base_salary,
                position_rate=state.position_rate,
                operations=state.operations,
                kpi_values=state.kpi,
                team_coefficients=state.team_coefficients,
                subordinates_bonus=state.subordinates_bonus
            )
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            text = f"üéØ <b>–†–ï–ó–£–õ–¨–¢–ê–¢ –†–ê–°–ß–ï–¢–ê –ü–†–ï–ú–ò–ò</b>\n\n"
            text += f"üë§ <b>–î–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {result.position_name}\n"
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–∫–ª–∞–¥–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è –ö–ü–ò –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π)
            if result.base_salary > 0 and result.position_rate > 0:
                text += f"üí∞ <b>–û–∫–ª–∞–¥ –ø–æ –¥–æ–≥–æ–≤–æ—Ä—É:</b> {format_money(result.base_salary)}\n"
                text += f"üìä <b>–†–∞–∑–º–µ—Ä —Å—Ç–∞–≤–∫–∏:</b> {result.position_rate} ({result.position_rate*100:.0f}%)\n"
                text += f"üíµ <b>–†–µ–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ–∫–ª–∞–¥–∞:</b> {format_money(result.real_salary)}\n\n"
            
            # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
            text += f"üèÜ <b>–ò–¢–û–ì–û–í–ê–Ø –ü–†–ï–ú–ò–Ø: {format_money(result.total_premium)}</b>\n\n"
            
            if result.operation_bonus > 0:
                text += f"üìà –ë–æ–Ω—É—Å –∑–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏: <b>{format_money(result.operation_bonus)}</b>\n"
            
            if result.kpi_bonus > 0:
                text += f"‚≠ê –ë–æ–Ω—É—Å –ö–ü–ò: <b>{format_money(result.kpi_bonus)}</b>\n"
            
            text += "\n"
            
            # –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π
            if result.operation_details:
                text += "üìä <b>–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π:</b>\n"
                for detail in result.operation_details:
                    emoji = detail.get('emoji', 'üìä')
                    name = detail['name']
                    quantity = detail['quantity']
                    final_bonus = detail['final_bonus']
                    
                    if detail['coefficient'] != 1.0:
                        text += f"{emoji} {name}: {quantity} ‚Üí {format_money(final_bonus)} (–∫={detail['coefficient']:.1f})\n"
                    else:
                        text += f"{emoji} {name}: {quantity} ‚Üí {format_money(final_bonus)}\n"
                text += "\n"
            
            # –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ö–ü–ò
            if result.kpi_details:
                text += "‚≠ê <b>–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ö–ü–ò:</b>\n"
                for detail in result.kpi_details:
                    emoji = detail.get('emoji', 'üìä')
                    name = detail['name']
                    percent = detail['percent']
                    bonus = detail['bonus']
                    coeff = detail['coefficient']
                    
                    text += f"{emoji} {name}: {format_percent(percent)} ‚Üí {format_money(bonus)} (–∫={coeff:.2f})\n"
                text += "\n"
            
            # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
            if result.warnings:
                text += "‚ö†Ô∏è <b>–í–∞–∂–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b>\n"
                for warning in result.warnings:
                    text += f"‚Ä¢ {warning}\n"
                text += "\n"
            
            # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
            keyboard = [
                [InlineKeyboardButton("üîÑ –ù–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç", callback_data="new_calculation")],
                [InlineKeyboardButton("üìä –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ä–º—É–ª—ã", callback_data="show_formulas")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                text,
                reply_markup=reply_markup,
                parse_mode=ParseMode.HTML
            )
            
            return SHOWING_RESULTS
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –ø—Ä–µ–º–∏–∏: {str(e)}\n\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /calculate –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞.",
                parse_mode=ParseMode.HTML
            )
            return ConversationHandler.END
    
    async def result_action(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö"""
        query = update.callback_query
        await query.answer()
        
        if query.data == "new_calculation":
            await query.edit_message_text(
                "üîÑ –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç!\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /calculate –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–µ–º–∏–∏.",
                parse_mode=ParseMode.HTML
            )
            return ConversationHandler.END
        
        elif query.data == "show_formulas":
            formulas_text = (
                "üìê <b>–§–æ—Ä–º—É–ª—ã —Ä–∞—Å—á–µ—Ç–∞:</b>\n\n"
                "<b>–ö–ü–ò –±–æ–Ω—É—Å (v2.4):</b>\n"
                "`–ö–ü–ò = (–æ–∫–ª–∞–¥ √ó —Å—Ç–∞–≤–∫–∞) √ó –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç_–ö–ü–ò`\n\n"
                "<b>–û–ø–µ—Ä–∞—Ü–∏–∏ —Å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º–∏:</b>\n"
                "‚Ä¢ –¢–∏–ø 1: –±–µ–∑ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤\n"
                "‚Ä¢ –¢–∏–ø 2: √ó –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–µ—Ä–≤–∏—Å–∞ (CSI)\n"
                "‚Ä¢ –¢–∏–ø 3: √ó –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –ø—Ä–∏–µ–º–∞\n"
                "‚Ä¢ –¢–∏–ø 4: √ó –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –≤—Ä—É—á–µ–Ω–∏—è\n\n"
                "<b>–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:</b>\n"
                "–ü—Ä–∏ –≤—ã—Ä—É—á–∫–µ ‚â•100%: +30% –∫ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π –ø—Ä–µ–º–∏–∏\n\n"
                "<b>–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∞–≤–∏–ª–æ:</b>\n"
                "–í—ã—Ä—É—á–∫–∞ <80% ‚Üí –ö–ü–ò = 0‚ÇΩ"
            )
            
            await query.edit_message_text(
                formulas_text,
                parse_mode=ParseMode.HTML
            )
            
            return SHOWING_RESULTS
    
    async def cancel(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞—Å—á–µ—Ç–∞"""
        user_id = update.effective_user.id
        if user_id in user_states:
            del user_states[user_id]
        
        await update.message.reply_text(
            "‚ùå –†–∞—Å—á–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /calculate –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞.",
            parse_mode=ParseMode.HTML
        )
        return ConversationHandler.END

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    print(f"üöÄ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ –ø—Ä–µ–º–∏–π –û–ü–° v2.4...")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(TOKEN).build()
    bot = PremiumBot()
    
    # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("calculate", bot.calculate)],
        states={
            CHOOSING_POSITION: [CallbackQueryHandler(bot.position_chosen, pattern="^pos_")],
            ENTERING_SALARY: [MessageHandler(filters.TEXT & ~filters.COMMAND, bot.salary_entered)],
            ENTERING_RATE: [CallbackQueryHandler(bot.rate_chosen, pattern="^rate_")],
            ENTERING_OPERATIONS: [MessageHandler(filters.TEXT, bot.operation_entered)],
            ENTERING_KPI: [MessageHandler(filters.TEXT, bot.kpi_entered)],
            ENTERING_COEFFICIENTS: [MessageHandler(filters.TEXT, bot.coefficient_entered)],
            SHOWING_RESULTS: [CallbackQueryHandler(bot.result_action)]
        },
        fallbacks=[CommandHandler("cancel", bot.cancel)]
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(conv_handler)
    application.add_handler(CommandHandler("start", bot.start))
    application.add_handler(CommandHandler("help", bot.help_command))
    application.add_handler(CommandHandler("positions", bot.positions))
    application.add_handler(CommandHandler("operations", bot.operations))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    application.run_polling()

if __name__ == "__main__":
    main() 