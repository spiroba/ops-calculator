"""
–ú–æ–¥—É–ª—å —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–µ–º–∏–π v2.4
–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω —Å HTML –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–æ–º –ø—Ä–µ–º–∏–π –û–ü–°
"""

from typing import Dict, List, Tuple, Optional
from dataclasses import dataclass
from config_v2 import OPERATIONS_CONFIG, POSITIONS_CONFIG, KPI_CONFIG, KPI_WEIGHTS

@dataclass
class CalculationResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–µ–º–∏–∏"""
    total_premium: float
    operation_bonus: float
    kpi_bonus: float
    base_salary: float
    position_rate: float
    real_salary: float
    operation_details: List[Dict]
    kpi_details: List[Dict]
    warnings: List[str]
    position_name: str

class PremiumCalculator:
    """–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø—Ä–µ–º–∏–π v2.4"""
    
    def __init__(self):
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ü–í–ó WB (—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ set_pvz_params)
        self._pvz_work_schedule = "—Ä–µ–∂–∏–º1"
        self._pvz_rating = 5.0
    
    def set_pvz_params(self, work_schedule: str = "—Ä–µ–∂–∏–º1", rating: float = 5.0):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ü–í–ó WB"""
        self._pvz_work_schedule = work_schedule
        self._pvz_rating = rating
    
    def calculate_kpi_coefficient(self, percent: float, kpi_type: str) -> float:
        """–†–∞—Å—á–µ—Ç –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –ö–ü–ò (—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å HTML)"""
        if kpi_type == 'revenue':
            if percent >= 110: return 1.0
            elif percent >= 105: return 0.8
            elif percent >= 100: return 0.6
            elif percent >= 95: return 0.4
            elif percent >= 90: return 0.2
            elif percent >= 85: return 0.1
            elif percent >= 80: return 0.05
            else: return 0.0
        
        elif kpi_type == 'csi':
            if percent >= 95: return 1.0
            elif percent >= 90: return 0.6
            elif percent >= 85: return 0.2
            else: return 0.0
        
        elif kpi_type in ['online_rpo', 'co1_co2']:
            if percent >= 110: return 1.0
            elif percent >= 105: return 0.8
            elif percent >= 100: return 0.6
            elif percent >= 95: return 0.4
            elif percent >= 90: return 0.2
            elif percent >= 85: return 0.1
            else: return 0.0
        
        return 0.0
    
    def calculate_team_coefficient(self, value: float, coeff_type: str) -> float:
        """–†–∞—Å—á–µ—Ç –∫–æ–º–∞–Ω–¥–Ω—ã—Ö –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ (—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å HTML)"""
        if coeff_type == 'service':
            if value >= 95: return 1.2
            elif value >= 90: return 1.1
            elif value >= 80: return 1.0
            else: return 1.0
        
        elif coeff_type == 'speed_reception':
            # –ù–æ—Ä–º–∞: < 4 –º–∏–Ω = –≤—ã–ø–æ–ª–Ω–µ–Ω–æ (1.5), > 4 –º–∏–Ω = –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ (0.5)
            if value == 0: return 1.0  # –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ –≤—Ä–µ–º—è, –±–∞–∑–æ–≤—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç
            if value < 4: return 1.5   # –ú–µ–Ω—å—à–µ 4 –º–∏–Ω—É—Ç - –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
            return 0.5                 # –ë–æ–ª—å—à–µ 4 –º–∏–Ω—É—Ç - –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
        
        elif coeff_type == 'speed_delivery':
            # –ù–æ—Ä–º–∞: < 1:30 –º–∏–Ω (1.5 –º–∏–Ω) = –≤—ã–ø–æ–ª–Ω–µ–Ω–æ (1.5), > 1:30 –º–∏–Ω = –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ (0.5)
            if value == 0: return 1.0  # –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ –≤—Ä–µ–º—è, –±–∞–∑–æ–≤—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç
            if value < 1.5: return 1.5 # –ú–µ–Ω—å—à–µ 1:30 –º–∏–Ω—É—Ç - –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
            return 0.5                 # –ë–æ–ª—å—à–µ 1:30 –º–∏–Ω—É—Ç - –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
        
        elif coeff_type == 'efficiency':
            if value >= 100: return 0.3  # 30% –±–æ–Ω—É—Å –∫ –∏—Ç–æ–≥–æ–≤–æ–π –ø—Ä–µ–º–∏–∏
            else: return 0.0
        
        return 1.0
    
    def calculate_pvz_wb_bonus(self, quantity: int, work_schedule: str = "—Ä–µ–∂–∏–º1", rating: float = 5.0) -> float:
        """–†–∞—Å—á–µ—Ç –±–æ–Ω—É—Å–∞ –∑–∞ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –ü–í–ó WB (–æ–ø–µ—Ä–∞—Ü–∏—è #13) —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü–µ"""
        if quantity <= 0:
            return 0.0
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–∫–∞–∑–æ–≤
        if quantity <= 50:
            range_index = 0
        elif quantity <= 100:
            range_index = 1
        elif quantity <= 166:
            range_index = 2
        else:  # 167 –∏ –±–æ–ª–µ–µ
            range_index = 3
        
        # WB1 - –°—É–º–º—ã –ø–æ –ø–ª–∞–Ω–æ–≤—ã–º —Ä–µ–∂–∏–º–∞–º
        wb1_amounts = [
            [0, 1000, 2000, 3000],      # 50 –∏ –º–µ–Ω–µ–µ
            [1000, 2000, 3000, 3000],   # 51-100
            [2000, 3000, 3000, 3000],   # 101-166
            [3000, 3000, 3000, 3000]    # 167 –∏ –±–æ–ª–µ–µ
        ]
        
        # WB2 - –°—É–º–º—ã –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É –ü–í–ó
        wb2_amounts = [
            [0, 1500, 3000, 4500],      # 50 –∏ –º–µ–Ω–µ–µ
            [1500, 3000, 4500, 4500],   # 51-100
            [3000, 4500, 4500, 4500],   # 101-166
            [4500, 4500, 4500, 4500]    # 167 –∏ –±–æ–ª–µ–µ
        ]
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –¥–ª—è WB1
        schedule_index = 0  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ä–µ–∂–∏–º–∞–º
        
        if work_schedule == "—Ä–µ–∂–∏–º1":  # 7 –¥–Ω–µ–π –≤ –Ω–µ–¥–µ–ª—é, –ø–æ 11 —á–∞—Å–æ–≤
            schedule_index = 1
        elif work_schedule == "—Ä–µ–∂–∏–º2":  # –Ω–µ –º–µ–Ω–µ–µ 5 –¥–Ω–µ–π, –ø–æ 6 —á–∞—Å–æ–≤, –¥–æ 20:00
            schedule_index = 2
        elif work_schedule == "–ø–æ–ª–Ω—ã–π":  # —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –æ–±–æ–∏–º —Ä–µ–∂–∏–º–∞–º
            schedule_index = 3
        
        # –†–∞—Å—á–µ—Ç WB1 (–ø–æ –ø–ª–∞–Ω–æ–≤—ã–º —Ä–µ–∂–∏–º–∞–º)
        wb1_bonus = wb1_amounts[range_index][schedule_index]
        
        # –†–∞—Å—á–µ—Ç WB2 (–ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É)
        wb2_bonus = 0
        rating_index = 0  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä–µ–π—Ç–∏–Ω–≥ < 4.9
        
        if rating >= 5.0:
            rating_index = 3  # –†–µ–π—Ç–∏–Ω–≥ = 5.0
        elif rating >= 4.9:
            rating_index = 2  # 4.9 ‚â§ –†–µ–π—Ç–∏–Ω–≥ < 5.0
        elif rating > 0:
            rating_index = 1  # –†–µ–π—Ç–∏–Ω–≥ –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª
        
        wb2_bonus = wb2_amounts[range_index][rating_index]
        
        # –û–±—â–∞—è –ø—Ä–µ–º–∏—è = WB1 + WB2
        return float(wb1_bonus + wb2_bonus)
    
    def calculate_operations_bonus(
        self, 
        operations: Dict[int, float], 
        position_config: Dict,
        team_coefficients: Dict[str, float]
    ) -> Tuple[float, List[Dict]]:
        """–†–∞—Å—á–µ—Ç –±–æ–Ω—É—Å–∞ –∑–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        total_bonus = 0.0
        details = []
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
        service_coeff = self.calculate_team_coefficient(
            team_coefficients.get('service', 0), 'service'
        )
        
        # –î–ª—è –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (–æ–Ω–∏ —É–∂–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã –≤ –±–æ—Ç–µ)
        speed_reception_coeff = team_coefficients.get('speed_reception', 1.0)
        speed_delivery_coeff = team_coefficients.get('speed_delivery', 1.0)
        
        efficiency_coeff = self.calculate_team_coefficient(
            team_coefficients.get('efficiency', 0), 'efficiency'
        )
        
        for op_id, quantity in operations.items():
            if quantity <= 0 or op_id not in OPERATIONS_CONFIG:
                continue
                
            op_config = OPERATIONS_CONFIG[op_id]
            base_bonus = 0.0
            applied_coeff = 1.0
            
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –ü–í–ó WB
            if op_id == 13:  # –û–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –ü–í–ó WB
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã –∏ —Ä–µ–π—Ç–∏–Ω–≥–∞
                work_schedule = getattr(self, '_pvz_work_schedule', "—Ä–µ–∂–∏–º1")
                rating = getattr(self, '_pvz_rating', 5.0)
                base_bonus = self.calculate_pvz_wb_bonus(int(quantity), work_schedule, rating)
            else:
                # –û–±—ã—á–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
                if op_config['type'] == 'fixed':
                    base_bonus = quantity * op_config['value']
                elif op_config['type'] == 'percent':
                    base_bonus = quantity * op_config['value']
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –ø–æ —Ç–∏–ø—É –æ–ø–µ—Ä–∞—Ü–∏–∏
            operation_type = op_config.get('operationType', 1)
            
            if operation_type == 2:  # –¢–∏–ø 2: —Å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
                applied_coeff = service_coeff
            elif operation_type == 3:  # –¢–∏–ø 3: —Å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–º —Å–∫–æ—Ä–æ—Å—Ç–∏ –ø—Ä–∏–µ–º–∞
                applied_coeff = speed_reception_coeff
            elif operation_type == 4:  # –¢–∏–ø 4: —Å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–º —Å–∫–æ—Ä–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
                applied_coeff = speed_delivery_coeff
            # –¢–∏–ø 1: –±–µ–∑ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ (applied_coeff = 1.0)
            
            final_bonus = base_bonus * applied_coeff
            total_bonus += final_bonus
            
            details.append({
                'name': op_config['name'],
                'quantity': quantity,
                'rate': op_config['rate'],
                'base_bonus': base_bonus,
                'coefficient': applied_coeff,
                'final_bonus': final_bonus,
                'operation_type': operation_type,
                'emoji': op_config.get('emoji', 'üìä')
            })
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫ –∏—Ç–æ–≥–æ–≤–æ–º—É –±–æ–Ω—É—Å—É
        if efficiency_coeff > 0:
            efficiency_bonus = total_bonus * efficiency_coeff
            total_bonus += efficiency_bonus
            
            details.append({
                'name': '–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –û–ü–°',
                'quantity': team_coefficients.get('efficiency', 0),
                'rate': f'{efficiency_coeff*100:.0f}% –æ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π',
                'base_bonus': 0,
                'coefficient': 1.0,
                'final_bonus': efficiency_bonus,
                'operation_type': 'efficiency',
                'emoji': 'üìà'
            })
        
        return total_bonus, details
    
    def calculate_kpi_bonus(
        self, 
        kpi_values: Dict[str, float],
        base_salary: float,
        position_rate: float,
        position: str
    ) -> Tuple[float, List[Dict]]:
        """–†–∞—Å—á–µ—Ç –ö–ü–ò –±–æ–Ω—É—Å–∞: 20% –æ—Ç –æ–∫–ª–∞–¥–∞ —Å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –ø–æ –≤–µ—Å–∞–º –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π"""
        if not kpi_values:
            return 0.0, [], []
        
        total_bonus = 0.0
        details = []
        warnings = []
        
        # –†–µ–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ–∫–ª–∞–¥–∞ = –æ–∫–ª–∞–¥ √ó —Å—Ç–∞–≤–∫–∞
        # FALLBACK: –µ—Å–ª–∏ –æ–∫–ª–∞–¥ –∏–ª–∏ —Å—Ç–∞–≤–∫–∞ –Ω–µ –∑–∞–¥–∞–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é –±–∞–∑—É 150000‚ÇΩ
        if base_salary > 0 and position_rate > 0:
            real_salary = base_salary * position_rate
        else:
            real_salary = 150000.0  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –±–∞–∑–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ (30000 = 20% –æ—Ç 150000)
        
        # –ë–ê–ó–û–í–ê–Ø –°–£–ú–ú–ê –ö–ü–ò = 20% –æ—Ç –æ–∫–ª–∞–¥–∞
        base_kpi_amount = real_salary * 0.20
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∞–≤–∏–ª–æ –¥–ª—è –≤—ã—Ä—É—á–∫–∏
        revenue_percent = kpi_values.get('revenue', 0)
        if revenue_percent < 80:
            warnings.append(
                f"‚ö†Ô∏è –í—ã—Ä—É—á–∫–∞ {revenue_percent}% < 80% - –ö–ü–ò –Ω–µ –≤—ã–ø–ª–∞—á–∏–≤–∞–µ—Ç—Å—è!"
            )
            return 0.0, [], warnings
        
        # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Å–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–π –¥–æ–ª–∂–Ω–æ—Å—Ç–∏
        position_weights = KPI_WEIGHTS.get(position, {})
        
        if not position_weights:
            warnings.append(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω—ã –≤–µ—Å–∞ –ö–ü–ò –¥–ª—è –¥–æ–ª–∂–Ω–æ—Å—Ç–∏: {position}")
            return 0.0, [], warnings
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ö–ü–ò –ø–æ –∫–∞–∂–¥–æ–º—É –ø–æ–∫–∞–∑–∞—Ç–µ–ª—é
        for kpi_id, percent in kpi_values.items():
            if percent > 0 and kpi_id in position_weights:
                coefficient = self.calculate_kpi_coefficient(percent, kpi_id)
                weight = position_weights[kpi_id]
                
                # –ù–û–í–ê–Ø –§–û–†–ú–£–õ–ê: –ö–ü–ò_–ø–æ–∫–∞–∑–∞—Ç–µ–ª—è = (–±–∞–∑–æ–≤–∞—è_—Å—É–º–º–∞_–ö–ü–ò √ó –≤–µ—Å_–ø–æ–∫–∞–∑–∞—Ç–µ–ª—è) √ó –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç_–¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
                kpi_bonus = base_kpi_amount * weight * coefficient
                total_bonus += kpi_bonus
                
                kpi_config = KPI_CONFIG.get(kpi_id, {'name': kpi_id, 'emoji': 'üìä'})
                
                details.append({
                    'name': kpi_config['name'],
                    'percent': percent,
                    'weight': weight,
                    'coefficient': coefficient,
                    'bonus': kpi_bonus,
                    'base_kpi_amount': base_kpi_amount,
                    'base_salary': base_salary,
                    'position_rate': position_rate,
                    'real_salary': real_salary,
                    'emoji': kpi_config.get('emoji', 'üìä')
                })
        
        return total_bonus, details, warnings
    
    def calculate_premium(
        self,
        position: str,
        base_salary: float,
        position_rate: float,
        operations: Dict[int, float],
        kpi_values: Dict[str, float],
        team_coefficients: Dict[str, float],
        subordinates_bonus: float = 0.0
    ) -> CalculationResult:
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–µ–º–∏–∏"""
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–æ–ª–∂–Ω–æ—Å—Ç–∏
        position_config = POSITIONS_CONFIG.get(position, {})
        if not position_config:
            raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å: {position}")
        
        warnings = []
        
        # –†–∞—Å—á–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞
        operation_bonus, operation_details = self.calculate_operations_bonus(
            operations, position_config, team_coefficients
        )
        
        # –†–∞—Å—á–µ—Ç –ö–ü–ò –±–æ–Ω—É—Å–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π —Å –ö–ü–ò)
        kpi_bonus = 0.0
        kpi_details = []
        
        if position_config.get('kpi'):
            kpi_bonus, kpi_details, kpi_warnings = self.calculate_kpi_bonus(
                kpi_values, base_salary, position_rate, position
            )
            warnings.extend(kpi_warnings)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –±–æ–Ω—É—Å –∑–∞ –ø–æ–¥—á–∏–Ω–µ–Ω–Ω—ã—Ö (–¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω—á–µ—Å–∫–æ–≥–æ –ù–û–ü–°)
        if subordinates_bonus > 0:
            operation_bonus += subordinates_bonus
            operation_details.append({
                'name': '–ë–æ–Ω—É—Å –∑–∞ –ø–æ–¥—á–∏–Ω–µ–Ω–Ω—ã—Ö',
                'quantity': 1,
                'rate': f'{subordinates_bonus}‚ÇΩ',
                'base_bonus': subordinates_bonus,
                'coefficient': 1.0,
                'final_bonus': subordinates_bonus,
                'operation_type': 'management',
                'emoji': 'üë•'
            })
        
        # –û–±—â–∞—è –ø—Ä–µ–º–∏—è
        total_premium = operation_bonus + kpi_bonus
        real_salary = base_salary * position_rate if base_salary > 0 and position_rate > 0 else 0
        
        return CalculationResult(
            total_premium=total_premium,
            operation_bonus=operation_bonus,
            kpi_bonus=kpi_bonus,
            base_salary=base_salary,
            position_rate=position_rate,
            real_salary=real_salary,
            operation_details=operation_details,
            kpi_details=kpi_details,
            warnings=warnings,
            position_name=position_config.get('name', position)
        )

def format_money(amount: float) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–Ω–µ–∂–Ω–æ–π —Å—É–º–º—ã"""
    return f"{amount:,.0f}‚ÇΩ".replace(',', ' ')

def format_percent(value: float) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤"""
    return f"{value:.1f}%" 