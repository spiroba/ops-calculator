import os
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes, ConversationHandler
from config import POSITIONS, MESSAGES, UserState, OPERATION_RATES, TOKEN, OPERATIONS
from calculator import calculate_bonus
import logging

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
CHOOSING_POSITION, ENTERING_OPERATIONS, ENTERING_KPI = range(3)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

class UserState:
    def __init__(self):
        self.position = None
        self.operations = {}
        self.kpi = None

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞–ª–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –∏ –≤—ã–±–æ—Ä –¥–æ–ª–∂–Ω–æ—Å—Ç–∏"""
    user_id = update.effective_user.id
    user_states[user_id] = UserState()
    
    logging.info(f"User {user_id} started conversation")
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ–ª–∂–Ω–æ—Å—Ç—è–º–∏
    keyboard = []
    row = []
    for i, (pos_id, pos_data) in enumerate(POSITIONS.items(), 1):
        emoji = pos_data.get('emoji', 'üë§')
        button = InlineKeyboardButton(f"{emoji} {pos_data['name']}", callback_data=f"pos_{pos_id}")
        row.append(button)
        if i % 2 == 0 or i == len(POSITIONS):  # 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
            keyboard.append(row)
            row = []
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "üëã *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø—Ä–µ–º–∏–π\\!*\n\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø—Ä–µ–º–∏—é –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏\\.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –¥–æ–ª–∂–Ω–æ—Å—Ç—å:",
        parse_mode='MarkdownV2',
        reply_markup=reply_markup
    )
    
    return CHOOSING_POSITION

async def position_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏"""
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    position_id = query.data.replace("pos_", "")
    user_states[user_id].position = position_id
    
    logging.info(f"User {user_id} chose position: {position_id}")
    
    await query.edit_message_text(
        f"*{POSITIONS[position_id]['name']}* –≤—ã–±—Ä–∞–Ω\\!\n\n"
        "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –ö–ü–≠ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:\n\n"
        "*1\\.* CSI \\(0\\-100\\)\n"
        "*2\\.* –í—ã—Ä—É—á–∫–∞ \\(0\\-100\\)\n"
        "*3\\.* –°–∫–æ—Ä–æ—Å—Ç—å –ø—Ä–∏–µ–º–∞ \\(0\\-100\\)\n"
        "*4\\.* –°–∫–æ—Ä–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ \\(0\\-100\\)\n\n"
        "_–ü—Ä–∏–º–µ—Ä: 95 85 98 97_",
        parse_mode='MarkdownV2'
    )
    
    return ENTERING_KPI

async def process_kpi(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ö–ü–≠"""
    user_id = update.effective_user.id
    text = update.message.text.strip()
    
    logging.info(f"User {user_id} entered KPI: {text}")
    
    try:
        values = text.split()
        if len(values) != 4:
            raise ValueError(
                "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ —Ä–æ–≤–Ω–æ 4 —á–∏—Å–ª–∞\\!\n\n"
                "üìä *–§–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ \\(–≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ %\\):*\n"
                "*1\\.* CSI \\(0\\-100\\)\n"
                "*2\\.* –í—ã—Ä—É—á–∫–∞ \\(0\\-100\\)\n"
                "*3\\.* –°–∫–æ—Ä–æ—Å—Ç—å –ø—Ä–∏–µ–º–∞ \\(0\\-100\\)\n"
                "*4\\.* –°–∫–æ—Ä–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ \\(0\\-100\\)\n\n"
                "_–ü—Ä–∏–º–µ—Ä: 95 85 98 97_"
            )
            
        csi, revenue, speed_accept, speed_delivery = map(float, values)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π - –≤—Å–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
        for name, value in [
            ("CSI", csi),
            ("–í—ã—Ä—É—á–∫–∞", revenue),
            ("–°–∫–æ—Ä–æ—Å—Ç—å –ø—Ä–∏–µ–º–∞", speed_accept),
            ("–°–∫–æ—Ä–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏", speed_delivery)
        ]:
            if not (0 <= value <= 100):
                raise ValueError(f"{name} –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0 –¥–æ 100%")
            
        user_states[user_id].kpi = {
            "csi": csi,
            "revenue": revenue,
            "speed_accept": speed_accept,
            "speed_delivery": speed_delivery
        }
        
        # –ü—Ä–æ—Å—Ç–æ–π —Ä–∞—Å—á–µ—Ç –ø—Ä–µ–º–∏–∏ (–ø–æ–∫–∞ –±–µ–∑ –æ–ø–µ—Ä–∞—Ü–∏–π)
        base_bonus = 5000  # –ë–∞–∑–æ–≤–∞—è –ø—Ä–µ–º–∏—è
        kpi_bonus = 0
        
        # –ë–æ–Ω—É—Å –∑–∞ CSI
        if csi >= 95:
            kpi_bonus += 5000
        elif csi >= 90:
            kpi_bonus += 3000
        elif csi >= 85:
            kpi_bonus += 1000
            
        total_bonus = base_bonus + kpi_bonus
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        message = (
            f"üìä *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–µ–º–∏–∏*\n\n"
            f"üëî –î–æ–ª–∂–Ω–æ—Å—Ç—å: {POSITIONS[user_states[user_id].position]['name']}\n\n"
            f"üí∞ *–ë–æ–Ω—É—Å—ã:*\n"
            f"‚Ä¢ –ë–∞–∑–æ–≤—ã–π –±–æ–Ω—É—Å: {base_bonus}‚ÇΩ\n"
            f"‚Ä¢ –ö–ü–≠ –±–æ–Ω—É—Å: {kpi_bonus}‚ÇΩ\n\n"
            f"üíµ *–ò—Ç–æ–≥–æ–≤–∞—è –ø—Ä–µ–º–∏—è:* {total_bonus}‚ÇΩ\n\n"
            f"üìà *–ö–ü–≠ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:*\n"
            f"‚Ä¢ CSI: {csi}%\n"
            f"‚Ä¢ –í—ã—Ä—É—á–∫–∞: {revenue}%\n"
            f"‚Ä¢ –°–∫–æ—Ä–æ—Å—Ç—å –ø—Ä–∏–µ–º–∞: {speed_accept}%\n"
            f"‚Ä¢ –°–∫–æ—Ä–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏: {speed_delivery}%\n\n"
            f"üîÑ –î–ª—è –Ω–æ–≤–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞
        keyboard = [[InlineKeyboardButton("üîÑ –ù–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç", callback_data="new_calculation")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            message,
            parse_mode='MarkdownV2',
            reply_markup=reply_markup
        )
        
        return ConversationHandler.END
        
    except ValueError as e:
        await update.message.reply_text(
            f"‚ùå –û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞: {str(e)}\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã",
            parse_mode='MarkdownV2'
        )
        return ENTERING_KPI

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏ —Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
    user_id = update.effective_user.id
    if user_id in user_states:
        del user_states[user_id]
    
    await update.message.reply_text(
        "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞\\.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞\\.",
        parse_mode='MarkdownV2'
    )
    
    return ConversationHandler.END

async def new_calculation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–ù–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç'"""
    query = update.callback_query
    await query.answer()
    
    # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å –Ω–∞—á–∞–ª–∞
    return await start(update, context)

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    print(f"Starting bot with token: {TOKEN[:10]}...")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler('start', start),
            CommandHandler('calculate', start)
        ],
        states={
            CHOOSING_POSITION: [
                CallbackQueryHandler(position_chosen, pattern='^pos_')
            ],
            ENTERING_KPI: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, process_kpi)
            ]
        },
        fallbacks=[
            CommandHandler('cancel', cancel),
            CallbackQueryHandler(new_calculation, pattern='^new_calculation$')
        ]
    )
    
    application.add_handler(conv_handler)
    
    print("Bot is starting...")
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    main()
